// Code generated by protoc-gen-go. DO NOT EDIT.
// source: gateway.proto

package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Modulation int32

const (
	// LoRa
	Modulation_LORA Modulation = 0
	// FSK
	Modulation_FSK Modulation = 1
)

var Modulation_name = map[int32]string{
	0: "LORA",
	1: "FSK",
}
var Modulation_value = map[string]int32{
	"LORA": 0,
	"FSK":  1,
}

func (x Modulation) String() string {
	return proto.EnumName(Modulation_name, int32(x))
}
func (Modulation) EnumDescriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

type CreateGatewayRequest struct {
	// Hex encoded mac address.
	Mac string `protobuf:"bytes,1,opt,name=mac" json:"mac,omitempty"`
	// A name for the gateway
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// A description for the gateway
	Description string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	// Latitude of the gateway -90 to 90
	Latitude float64 `protobuf:"fixed64,4,opt,name=latitude" json:"latitude,omitempty"`
	// Longitude of the gateway -180 to 180
	Longitude float64 `protobuf:"fixed64,5,opt,name=longitude" json:"longitude,omitempty"`
	// Altitude of the gateway in meters
	Altitude float64 `protobuf:"fixed64,6,opt,name=altitude" json:"altitude,omitempty"`
	// ID of the organization to which this gateway belongs.
	OrganizationID int64 `protobuf:"varint,7,opt,name=organizationID" json:"organizationID,omitempty"`
	// ID of the channel-configuration.
	ChannelConfigurationID int64 `protobuf:"varint,8,opt,name=channelConfigurationID" json:"channelConfigurationID,omitempty"`
	// Gateway sends out a periodic ping.
	Ping bool `protobuf:"varint,9,opt,name=ping" json:"ping,omitempty"`
	// ID of the network-server to which the gateway is connected.
	NetworkServerID int64 `protobuf:"varint,10,opt,name=networkServerID" json:"networkServerID,omitempty"`
	// Tags
	Tags []string `protobuf:"bytes,11,rep,name=tags" json:"tags,omitempty"`
	// Max Nodes
	MaxNodes int64 `protobuf:"varint,12,opt,name=maxNodes" json:"maxNodes,omitempty"`
}

func (m *CreateGatewayRequest) Reset()                    { *m = CreateGatewayRequest{} }
func (m *CreateGatewayRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateGatewayRequest) ProtoMessage()               {}
func (*CreateGatewayRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

func (m *CreateGatewayRequest) GetMac() string {
	if m != nil {
		return m.Mac
	}
	return ""
}

func (m *CreateGatewayRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateGatewayRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *CreateGatewayRequest) GetLatitude() float64 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *CreateGatewayRequest) GetLongitude() float64 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *CreateGatewayRequest) GetAltitude() float64 {
	if m != nil {
		return m.Altitude
	}
	return 0
}

func (m *CreateGatewayRequest) GetOrganizationID() int64 {
	if m != nil {
		return m.OrganizationID
	}
	return 0
}

func (m *CreateGatewayRequest) GetChannelConfigurationID() int64 {
	if m != nil {
		return m.ChannelConfigurationID
	}
	return 0
}

func (m *CreateGatewayRequest) GetPing() bool {
	if m != nil {
		return m.Ping
	}
	return false
}

func (m *CreateGatewayRequest) GetNetworkServerID() int64 {
	if m != nil {
		return m.NetworkServerID
	}
	return 0
}

func (m *CreateGatewayRequest) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *CreateGatewayRequest) GetMaxNodes() int64 {
	if m != nil {
		return m.MaxNodes
	}
	return 0
}

type CreateGatewayResponse struct {
}

func (m *CreateGatewayResponse) Reset()                    { *m = CreateGatewayResponse{} }
func (m *CreateGatewayResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateGatewayResponse) ProtoMessage()               {}
func (*CreateGatewayResponse) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{1} }

type GetGatewayRequest struct {
	// Hex encoded mac address of the node.
	Mac string `protobuf:"bytes,1,opt,name=mac" json:"mac,omitempty"`
}

func (m *GetGatewayRequest) Reset()                    { *m = GetGatewayRequest{} }
func (m *GetGatewayRequest) String() string            { return proto.CompactTextString(m) }
func (*GetGatewayRequest) ProtoMessage()               {}
func (*GetGatewayRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{2} }

func (m *GetGatewayRequest) GetMac() string {
	if m != nil {
		return m.Mac
	}
	return ""
}

type GetGatewayResponse struct {
	// Hex encoded mac address.
	Mac string `protobuf:"bytes,1,opt,name=mac" json:"mac,omitempty"`
	// A name for the gateway
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// A description for the gateway
	Description string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	// Latitude of the gateway -90.0 to 90.0
	Latitude float64 `protobuf:"fixed64,4,opt,name=latitude" json:"latitude,omitempty"`
	// Longitude of the gateway -180.0 to 180.0
	Longitude float64 `protobuf:"fixed64,5,opt,name=longitude" json:"longitude,omitempty"`
	// Altitude of the gateway in meters
	Altitude float64 `protobuf:"fixed64,6,opt,name=altitude" json:"altitude,omitempty"`
	// Creation timestamp of the record
	CreatedAt string `protobuf:"bytes,7,opt,name=createdAt" json:"createdAt,omitempty"`
	// Last update timestamp of the record
	UpdatedAt string `protobuf:"bytes,8,opt,name=updatedAt" json:"updatedAt,omitempty"`
	// The timestamp of the first data from the gateway.
	FirstSeenAt string `protobuf:"bytes,9,opt,name=firstSeenAt" json:"firstSeenAt,omitempty"`
	// The timestamp of the most recent data from the gateway.
	LastSeenAt string `protobuf:"bytes,10,opt,name=lastSeenAt" json:"lastSeenAt,omitempty"`
	// ID of the organization to which this gateway belongs.
	OrganizationID int64 `protobuf:"varint,11,opt,name=organizationID" json:"organizationID,omitempty"`
	// ID of the channel-configuration.
	ChannelConfigurationID int64 `protobuf:"varint,12,opt,name=channelConfigurationID" json:"channelConfigurationID,omitempty"`
	// Gateway sends out a periodic ping.
	Ping bool `protobuf:"varint,13,opt,name=ping" json:"ping,omitempty"`
	// ID of the network-server to which the gateway is connected.
	NetworkServerID int64 `protobuf:"varint,14,opt,name=networkServerID" json:"networkServerID,omitempty"`
	// Tags
	Tags []string `protobuf:"bytes,15,rep,name=tags" json:"tags,omitempty"`
	// Max Nodes
	MaxNodes int64 `protobuf:"varint,16,opt,name=maxNodes" json:"maxNodes,omitempty"`
}

func (m *GetGatewayResponse) Reset()                    { *m = GetGatewayResponse{} }
func (m *GetGatewayResponse) String() string            { return proto.CompactTextString(m) }
func (*GetGatewayResponse) ProtoMessage()               {}
func (*GetGatewayResponse) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{3} }

func (m *GetGatewayResponse) GetMac() string {
	if m != nil {
		return m.Mac
	}
	return ""
}

func (m *GetGatewayResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetGatewayResponse) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *GetGatewayResponse) GetLatitude() float64 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *GetGatewayResponse) GetLongitude() float64 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *GetGatewayResponse) GetAltitude() float64 {
	if m != nil {
		return m.Altitude
	}
	return 0
}

func (m *GetGatewayResponse) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *GetGatewayResponse) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

func (m *GetGatewayResponse) GetFirstSeenAt() string {
	if m != nil {
		return m.FirstSeenAt
	}
	return ""
}

func (m *GetGatewayResponse) GetLastSeenAt() string {
	if m != nil {
		return m.LastSeenAt
	}
	return ""
}

func (m *GetGatewayResponse) GetOrganizationID() int64 {
	if m != nil {
		return m.OrganizationID
	}
	return 0
}

func (m *GetGatewayResponse) GetChannelConfigurationID() int64 {
	if m != nil {
		return m.ChannelConfigurationID
	}
	return 0
}

func (m *GetGatewayResponse) GetPing() bool {
	if m != nil {
		return m.Ping
	}
	return false
}

func (m *GetGatewayResponse) GetNetworkServerID() int64 {
	if m != nil {
		return m.NetworkServerID
	}
	return 0
}

func (m *GetGatewayResponse) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *GetGatewayResponse) GetMaxNodes() int64 {
	if m != nil {
		return m.MaxNodes
	}
	return 0
}

type DeleteGatewayRequest struct {
	// Hex encoded mac address.
	Mac string `protobuf:"bytes,1,opt,name=mac" json:"mac,omitempty"`
}

func (m *DeleteGatewayRequest) Reset()                    { *m = DeleteGatewayRequest{} }
func (m *DeleteGatewayRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteGatewayRequest) ProtoMessage()               {}
func (*DeleteGatewayRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{4} }

func (m *DeleteGatewayRequest) GetMac() string {
	if m != nil {
		return m.Mac
	}
	return ""
}

type GenerateGatewayTokenRequest struct {
	// Hex encoded mac address.
	Mac string `protobuf:"bytes,1,opt,name=mac" json:"mac,omitempty"`
}

func (m *GenerateGatewayTokenRequest) Reset()                    { *m = GenerateGatewayTokenRequest{} }
func (m *GenerateGatewayTokenRequest) String() string            { return proto.CompactTextString(m) }
func (*GenerateGatewayTokenRequest) ProtoMessage()               {}
func (*GenerateGatewayTokenRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{5} }

func (m *GenerateGatewayTokenRequest) GetMac() string {
	if m != nil {
		return m.Mac
	}
	return ""
}

type GenerateGatewayTokenResponse struct {
	// Generated token.
	Token string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *GenerateGatewayTokenResponse) Reset()                    { *m = GenerateGatewayTokenResponse{} }
func (m *GenerateGatewayTokenResponse) String() string            { return proto.CompactTextString(m) }
func (*GenerateGatewayTokenResponse) ProtoMessage()               {}
func (*GenerateGatewayTokenResponse) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{6} }

func (m *GenerateGatewayTokenResponse) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type DeleteGatewayResponse struct {
}

func (m *DeleteGatewayResponse) Reset()                    { *m = DeleteGatewayResponse{} }
func (m *DeleteGatewayResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteGatewayResponse) ProtoMessage()               {}
func (*DeleteGatewayResponse) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{7} }

type ListGatewayRequest struct {
	// Max number of nodes to return in the result-set.
	Limit int32 `protobuf:"varint,1,opt,name=limit" json:"limit,omitempty"`
	// Offset of the result-set (for pagination).
	Offset int32 `protobuf:"varint,2,opt,name=offset" json:"offset,omitempty"`
	// ID of the organization for which to filter on, when left blank the
	// response will return all gateways to which the user has access to.
	OrganizationID int64 `protobuf:"varint,3,opt,name=organizationID" json:"organizationID,omitempty"`
	// The organization for which to filter on
	Name string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	// The tags for which to filter on
	Tags []string `protobuf:"bytes,5,rep,name=tags" json:"tags,omitempty"`
}

func (m *ListGatewayRequest) Reset()                    { *m = ListGatewayRequest{} }
func (m *ListGatewayRequest) String() string            { return proto.CompactTextString(m) }
func (*ListGatewayRequest) ProtoMessage()               {}
func (*ListGatewayRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{8} }

func (m *ListGatewayRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListGatewayRequest) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *ListGatewayRequest) GetOrganizationID() int64 {
	if m != nil {
		return m.OrganizationID
	}
	return 0
}

func (m *ListGatewayRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ListGatewayRequest) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

type ListGatewayItem struct {
	// Hex encoded mac address.
	Mac string `protobuf:"bytes,1,opt,name=mac" json:"mac,omitempty"`
	// A name for the gateway
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// A description for the gateway
	Description string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	// Creation timestamp of the record
	CreatedAt string `protobuf:"bytes,4,opt,name=createdAt" json:"createdAt,omitempty"`
	// Last update timestamp of the record
	UpdatedAt string `protobuf:"bytes,5,opt,name=updatedAt" json:"updatedAt,omitempty"`
	// ID of the organization to which this gateway belongs.
	OrganizationID int64 `protobuf:"varint,6,opt,name=organizationID" json:"organizationID,omitempty"`
	// ID of the network-server to which the gateway is connected.
	NetworkServerID int64 `protobuf:"varint,7,opt,name=networkServerID" json:"networkServerID,omitempty"`
	// Tags
	Tags []string `protobuf:"bytes,8,rep,name=tags" json:"tags,omitempty"`
	// Max Nodes
	MaxNodes int64 `protobuf:"varint,9,opt,name=maxNodes" json:"maxNodes,omitempty"`
}

func (m *ListGatewayItem) Reset()                    { *m = ListGatewayItem{} }
func (m *ListGatewayItem) String() string            { return proto.CompactTextString(m) }
func (*ListGatewayItem) ProtoMessage()               {}
func (*ListGatewayItem) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{9} }

func (m *ListGatewayItem) GetMac() string {
	if m != nil {
		return m.Mac
	}
	return ""
}

func (m *ListGatewayItem) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ListGatewayItem) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ListGatewayItem) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *ListGatewayItem) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

func (m *ListGatewayItem) GetOrganizationID() int64 {
	if m != nil {
		return m.OrganizationID
	}
	return 0
}

func (m *ListGatewayItem) GetNetworkServerID() int64 {
	if m != nil {
		return m.NetworkServerID
	}
	return 0
}

func (m *ListGatewayItem) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *ListGatewayItem) GetMaxNodes() int64 {
	if m != nil {
		return m.MaxNodes
	}
	return 0
}

type ListGatewayResponse struct {
	// Total number of nodes available within the result-set.
	TotalCount int32 `protobuf:"varint,1,opt,name=totalCount" json:"totalCount,omitempty"`
	// Nodes within this result-set.
	Result []*ListGatewayItem `protobuf:"bytes,2,rep,name=result" json:"result,omitempty"`
}

func (m *ListGatewayResponse) Reset()                    { *m = ListGatewayResponse{} }
func (m *ListGatewayResponse) String() string            { return proto.CompactTextString(m) }
func (*ListGatewayResponse) ProtoMessage()               {}
func (*ListGatewayResponse) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{10} }

func (m *ListGatewayResponse) GetTotalCount() int32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *ListGatewayResponse) GetResult() []*ListGatewayItem {
	if m != nil {
		return m.Result
	}
	return nil
}

type UpdateGatewayRequest struct {
	// Hex encoded mac address.
	Mac string `protobuf:"bytes,1,opt,name=mac" json:"mac,omitempty"`
	// A name for the gateway
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// A description for the gateway
	Description string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	// Latitude of the gateway -90.0 to 90.0
	Latitude float64 `protobuf:"fixed64,4,opt,name=latitude" json:"latitude,omitempty"`
	// Longitude of the gateway -180.0 to 180.0
	Longitude float64 `protobuf:"fixed64,5,opt,name=longitude" json:"longitude,omitempty"`
	// Altitude of the gateway in meters
	Altitude float64 `protobuf:"fixed64,6,opt,name=altitude" json:"altitude,omitempty"`
	// ID of the organization to which this gateway belongs.
	OrganizationID int64 `protobuf:"varint,7,opt,name=organizationID" json:"organizationID,omitempty"`
	// ID of the channel-configuration.
	ChannelConfigurationID int64 `protobuf:"varint,8,opt,name=channelConfigurationID" json:"channelConfigurationID,omitempty"`
	// Gateway sends out a periodic ping.
	Ping bool `protobuf:"varint,9,opt,name=ping" json:"ping,omitempty"`
	// Tags
	Tags []string `protobuf:"bytes,10,rep,name=tags" json:"tags,omitempty"`
	// Max Nodes
	MaxNodes int64 `protobuf:"varint,11,opt,name=maxNodes" json:"maxNodes,omitempty"`
}

func (m *UpdateGatewayRequest) Reset()                    { *m = UpdateGatewayRequest{} }
func (m *UpdateGatewayRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateGatewayRequest) ProtoMessage()               {}
func (*UpdateGatewayRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{11} }

func (m *UpdateGatewayRequest) GetMac() string {
	if m != nil {
		return m.Mac
	}
	return ""
}

func (m *UpdateGatewayRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateGatewayRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *UpdateGatewayRequest) GetLatitude() float64 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *UpdateGatewayRequest) GetLongitude() float64 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *UpdateGatewayRequest) GetAltitude() float64 {
	if m != nil {
		return m.Altitude
	}
	return 0
}

func (m *UpdateGatewayRequest) GetOrganizationID() int64 {
	if m != nil {
		return m.OrganizationID
	}
	return 0
}

func (m *UpdateGatewayRequest) GetChannelConfigurationID() int64 {
	if m != nil {
		return m.ChannelConfigurationID
	}
	return 0
}

func (m *UpdateGatewayRequest) GetPing() bool {
	if m != nil {
		return m.Ping
	}
	return false
}

func (m *UpdateGatewayRequest) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *UpdateGatewayRequest) GetMaxNodes() int64 {
	if m != nil {
		return m.MaxNodes
	}
	return 0
}

type UpdateGatewayResponse struct {
}

func (m *UpdateGatewayResponse) Reset()                    { *m = UpdateGatewayResponse{} }
func (m *UpdateGatewayResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateGatewayResponse) ProtoMessage()               {}
func (*UpdateGatewayResponse) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{12} }

type GatewayStats struct {
	// Timestamp of the (aggregated) measurement.
	Timestamp string `protobuf:"bytes,1,opt,name=timestamp" json:"timestamp,omitempty"`
	// Packets received by the gateway.
	RxPacketsReceived int32 `protobuf:"varint,2,opt,name=rxPacketsReceived" json:"rxPacketsReceived,omitempty"`
	// Packets received by the gateway that passed the CRC check.
	RxPacketsReceivedOK int32 `protobuf:"varint,3,opt,name=rxPacketsReceivedOK" json:"rxPacketsReceivedOK,omitempty"`
	// Packets received by the gateway for transmission.
	TxPacketsReceived int32 `protobuf:"varint,4,opt,name=txPacketsReceived" json:"txPacketsReceived,omitempty"`
	// Packets transmitted by the gateway.
	TxPacketsEmitted int32 `protobuf:"varint,5,opt,name=txPacketsEmitted" json:"txPacketsEmitted,omitempty"`
}

func (m *GatewayStats) Reset()                    { *m = GatewayStats{} }
func (m *GatewayStats) String() string            { return proto.CompactTextString(m) }
func (*GatewayStats) ProtoMessage()               {}
func (*GatewayStats) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{13} }

func (m *GatewayStats) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *GatewayStats) GetRxPacketsReceived() int32 {
	if m != nil {
		return m.RxPacketsReceived
	}
	return 0
}

func (m *GatewayStats) GetRxPacketsReceivedOK() int32 {
	if m != nil {
		return m.RxPacketsReceivedOK
	}
	return 0
}

func (m *GatewayStats) GetTxPacketsReceived() int32 {
	if m != nil {
		return m.TxPacketsReceived
	}
	return 0
}

func (m *GatewayStats) GetTxPacketsEmitted() int32 {
	if m != nil {
		return m.TxPacketsEmitted
	}
	return 0
}

type GetGatewayStatsRequest struct {
	// Hex encoded mac address.
	Mac string `protobuf:"bytes,1,opt,name=mac" json:"mac,omitempty"`
	// Aggregation interval.  One of "second", "minute", "hour", "day", "week",
	// "month", "quarter", "year".  Case insensitive.
	Interval string `protobuf:"bytes,2,opt,name=interval" json:"interval,omitempty"`
	// Timestamp to start from.
	StartTimestamp string `protobuf:"bytes,3,opt,name=startTimestamp" json:"startTimestamp,omitempty"`
	// Timestamp until to get from.
	EndTimestamp string `protobuf:"bytes,4,opt,name=endTimestamp" json:"endTimestamp,omitempty"`
}

func (m *GetGatewayStatsRequest) Reset()                    { *m = GetGatewayStatsRequest{} }
func (m *GetGatewayStatsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetGatewayStatsRequest) ProtoMessage()               {}
func (*GetGatewayStatsRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{14} }

func (m *GetGatewayStatsRequest) GetMac() string {
	if m != nil {
		return m.Mac
	}
	return ""
}

func (m *GetGatewayStatsRequest) GetInterval() string {
	if m != nil {
		return m.Interval
	}
	return ""
}

func (m *GetGatewayStatsRequest) GetStartTimestamp() string {
	if m != nil {
		return m.StartTimestamp
	}
	return ""
}

func (m *GetGatewayStatsRequest) GetEndTimestamp() string {
	if m != nil {
		return m.EndTimestamp
	}
	return ""
}

type GetGatewayStatsResponse struct {
	Result []*GatewayStats `protobuf:"bytes,1,rep,name=result" json:"result,omitempty"`
}

func (m *GetGatewayStatsResponse) Reset()                    { *m = GetGatewayStatsResponse{} }
func (m *GetGatewayStatsResponse) String() string            { return proto.CompactTextString(m) }
func (*GetGatewayStatsResponse) ProtoMessage()               {}
func (*GetGatewayStatsResponse) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{15} }

func (m *GetGatewayStatsResponse) GetResult() []*GatewayStats {
	if m != nil {
		return m.Result
	}
	return nil
}

type CreateChannelConfigurationRequest struct {
	// Name of the channel-configuration.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Channels active in this configuration. These channel indices must map
	// to the channel numbers as specified in the LoRaWAN Regional Parameters.
	Channels []int32 `protobuf:"varint,2,rep,packed,name=channels" json:"channels,omitempty"`
	// Network-server id.
	NetworkServerID int64 `protobuf:"varint,3,opt,name=networkServerID" json:"networkServerID,omitempty"`
}

func (m *CreateChannelConfigurationRequest) Reset()         { *m = CreateChannelConfigurationRequest{} }
func (m *CreateChannelConfigurationRequest) String() string { return proto.CompactTextString(m) }
func (*CreateChannelConfigurationRequest) ProtoMessage()    {}
func (*CreateChannelConfigurationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor5, []int{16}
}

func (m *CreateChannelConfigurationRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateChannelConfigurationRequest) GetChannels() []int32 {
	if m != nil {
		return m.Channels
	}
	return nil
}

func (m *CreateChannelConfigurationRequest) GetNetworkServerID() int64 {
	if m != nil {
		return m.NetworkServerID
	}
	return 0
}

type CreateChannelConfigurationResponse struct {
	// ID of the channel-configuration.
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *CreateChannelConfigurationResponse) Reset()         { *m = CreateChannelConfigurationResponse{} }
func (m *CreateChannelConfigurationResponse) String() string { return proto.CompactTextString(m) }
func (*CreateChannelConfigurationResponse) ProtoMessage()    {}
func (*CreateChannelConfigurationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor5, []int{17}
}

func (m *CreateChannelConfigurationResponse) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type GetChannelConfigurationRequest struct {
	// ID of the channel-configuration.
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// Network-server id.
	NetworkServerID int64 `protobuf:"varint,2,opt,name=networkServerID" json:"networkServerID,omitempty"`
}

func (m *GetChannelConfigurationRequest) Reset()                    { *m = GetChannelConfigurationRequest{} }
func (m *GetChannelConfigurationRequest) String() string            { return proto.CompactTextString(m) }
func (*GetChannelConfigurationRequest) ProtoMessage()               {}
func (*GetChannelConfigurationRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{18} }

func (m *GetChannelConfigurationRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GetChannelConfigurationRequest) GetNetworkServerID() int64 {
	if m != nil {
		return m.NetworkServerID
	}
	return 0
}

type GetChannelConfigurationResponse struct {
	// ID of the channel-configuration.
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// Name of the channel-configuration.
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// Channels active in this configuration. These channel indices must map
	// to the channel numbers as specified in the LoRaWAN Regional Parameters.
	Channels []int32 `protobuf:"varint,3,rep,packed,name=channels" json:"channels,omitempty"`
	// The timestamp when the channel-configuration was created.
	CreatedAt string `protobuf:"bytes,4,opt,name=createdAt" json:"createdAt,omitempty"`
	// The timestamp when the channel-configuration was last updated.
	UpdatedAt string `protobuf:"bytes,5,opt,name=updatedAt" json:"updatedAt,omitempty"`
	// Network-server id.
	NetworkServerID int64 `protobuf:"varint,6,opt,name=networkServerID" json:"networkServerID,omitempty"`
}

func (m *GetChannelConfigurationResponse) Reset()         { *m = GetChannelConfigurationResponse{} }
func (m *GetChannelConfigurationResponse) String() string { return proto.CompactTextString(m) }
func (*GetChannelConfigurationResponse) ProtoMessage()    {}
func (*GetChannelConfigurationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor5, []int{19}
}

func (m *GetChannelConfigurationResponse) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GetChannelConfigurationResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetChannelConfigurationResponse) GetChannels() []int32 {
	if m != nil {
		return m.Channels
	}
	return nil
}

func (m *GetChannelConfigurationResponse) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *GetChannelConfigurationResponse) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

func (m *GetChannelConfigurationResponse) GetNetworkServerID() int64 {
	if m != nil {
		return m.NetworkServerID
	}
	return 0
}

type UpdateChannelConfigurationRequest struct {
	// ID of the channel-configuration.
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// Name of the channel-configuration.
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// Channels active in this configuration. These channel indices must map
	// to the channel numbers as specified in the LoRaWAN Regional Parameters.
	Channels []int32 `protobuf:"varint,3,rep,packed,name=channels" json:"channels,omitempty"`
	// Network-server id.
	NetworkServerID int64 `protobuf:"varint,4,opt,name=networkServerID" json:"networkServerID,omitempty"`
}

func (m *UpdateChannelConfigurationRequest) Reset()         { *m = UpdateChannelConfigurationRequest{} }
func (m *UpdateChannelConfigurationRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateChannelConfigurationRequest) ProtoMessage()    {}
func (*UpdateChannelConfigurationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor5, []int{20}
}

func (m *UpdateChannelConfigurationRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UpdateChannelConfigurationRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateChannelConfigurationRequest) GetChannels() []int32 {
	if m != nil {
		return m.Channels
	}
	return nil
}

func (m *UpdateChannelConfigurationRequest) GetNetworkServerID() int64 {
	if m != nil {
		return m.NetworkServerID
	}
	return 0
}

type UpdateChannelConfigurationResponse struct {
}

func (m *UpdateChannelConfigurationResponse) Reset()         { *m = UpdateChannelConfigurationResponse{} }
func (m *UpdateChannelConfigurationResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateChannelConfigurationResponse) ProtoMessage()    {}
func (*UpdateChannelConfigurationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor5, []int{21}
}

type DeleteChannelConfigurationRequest struct {
	// ID of the channel-configuration.
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// Network-server id.
	NetworkServerID int64 `protobuf:"varint,2,opt,name=networkServerID" json:"networkServerID,omitempty"`
}

func (m *DeleteChannelConfigurationRequest) Reset()         { *m = DeleteChannelConfigurationRequest{} }
func (m *DeleteChannelConfigurationRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteChannelConfigurationRequest) ProtoMessage()    {}
func (*DeleteChannelConfigurationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor5, []int{22}
}

func (m *DeleteChannelConfigurationRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DeleteChannelConfigurationRequest) GetNetworkServerID() int64 {
	if m != nil {
		return m.NetworkServerID
	}
	return 0
}

type DeleteChannelConfigurationResponse struct {
}

func (m *DeleteChannelConfigurationResponse) Reset()         { *m = DeleteChannelConfigurationResponse{} }
func (m *DeleteChannelConfigurationResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteChannelConfigurationResponse) ProtoMessage()    {}
func (*DeleteChannelConfigurationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor5, []int{23}
}

type ListChannelConfigurationsRequest struct {
	// Network-server id.
	NetworkServerID int64 `protobuf:"varint,1,opt,name=networkServerID" json:"networkServerID,omitempty"`
}

func (m *ListChannelConfigurationsRequest) Reset()         { *m = ListChannelConfigurationsRequest{} }
func (m *ListChannelConfigurationsRequest) String() string { return proto.CompactTextString(m) }
func (*ListChannelConfigurationsRequest) ProtoMessage()    {}
func (*ListChannelConfigurationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor5, []int{24}
}

func (m *ListChannelConfigurationsRequest) GetNetworkServerID() int64 {
	if m != nil {
		return m.NetworkServerID
	}
	return 0
}

type ListChannelConfigurationsResponse struct {
	// Result-set.
	Result []*GetChannelConfigurationResponse `protobuf:"bytes,1,rep,name=result" json:"result,omitempty"`
}

func (m *ListChannelConfigurationsResponse) Reset()         { *m = ListChannelConfigurationsResponse{} }
func (m *ListChannelConfigurationsResponse) String() string { return proto.CompactTextString(m) }
func (*ListChannelConfigurationsResponse) ProtoMessage()    {}
func (*ListChannelConfigurationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor5, []int{25}
}

func (m *ListChannelConfigurationsResponse) GetResult() []*GetChannelConfigurationResponse {
	if m != nil {
		return m.Result
	}
	return nil
}

type CreateExtraChannelRequest struct {
	// ID of the channel-configuration.
	ChannelConfigurationID int64 `protobuf:"varint,1,opt,name=channelConfigurationID" json:"channelConfigurationID,omitempty"`
	// Modulation.
	Modulation Modulation `protobuf:"varint,2,opt,name=modulation,enum=api.Modulation" json:"modulation,omitempty"`
	// Frequency.
	Frequency int32 `protobuf:"varint,3,opt,name=frequency" json:"frequency,omitempty"`
	// Bandwidth.
	BandWidth int32 `protobuf:"varint,4,opt,name=bandWidth" json:"bandWidth,omitempty"`
	// Bit rate (in case of FSK modulation).
	BitRate int32 `protobuf:"varint,5,opt,name=bitRate" json:"bitRate,omitempty"`
	// Spread-factors (in case of LoRa modulation).
	SpreadFactors []int32 `protobuf:"varint,6,rep,packed,name=spreadFactors" json:"spreadFactors,omitempty"`
	// Network-server id.
	NetworkServerID int64 `protobuf:"varint,7,opt,name=networkServerID" json:"networkServerID,omitempty"`
}

func (m *CreateExtraChannelRequest) Reset()                    { *m = CreateExtraChannelRequest{} }
func (m *CreateExtraChannelRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateExtraChannelRequest) ProtoMessage()               {}
func (*CreateExtraChannelRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{26} }

func (m *CreateExtraChannelRequest) GetChannelConfigurationID() int64 {
	if m != nil {
		return m.ChannelConfigurationID
	}
	return 0
}

func (m *CreateExtraChannelRequest) GetModulation() Modulation {
	if m != nil {
		return m.Modulation
	}
	return Modulation_LORA
}

func (m *CreateExtraChannelRequest) GetFrequency() int32 {
	if m != nil {
		return m.Frequency
	}
	return 0
}

func (m *CreateExtraChannelRequest) GetBandWidth() int32 {
	if m != nil {
		return m.BandWidth
	}
	return 0
}

func (m *CreateExtraChannelRequest) GetBitRate() int32 {
	if m != nil {
		return m.BitRate
	}
	return 0
}

func (m *CreateExtraChannelRequest) GetSpreadFactors() []int32 {
	if m != nil {
		return m.SpreadFactors
	}
	return nil
}

func (m *CreateExtraChannelRequest) GetNetworkServerID() int64 {
	if m != nil {
		return m.NetworkServerID
	}
	return 0
}

type CreateExtraChannelResponse struct {
	// ID of the extra channel.
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *CreateExtraChannelResponse) Reset()                    { *m = CreateExtraChannelResponse{} }
func (m *CreateExtraChannelResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateExtraChannelResponse) ProtoMessage()               {}
func (*CreateExtraChannelResponse) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{27} }

func (m *CreateExtraChannelResponse) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type UpdateExtraChannelRequest struct {
	// ID of the extra channel.
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// ID of the channel-configuration.
	ChannelConfigurationID int64 `protobuf:"varint,2,opt,name=channelConfigurationID" json:"channelConfigurationID,omitempty"`
	// Modulation.
	Modulation Modulation `protobuf:"varint,3,opt,name=modulation,enum=api.Modulation" json:"modulation,omitempty"`
	// Frequency.
	Frequency int32 `protobuf:"varint,4,opt,name=frequency" json:"frequency,omitempty"`
	// Bandwidth.
	BandWidth int32 `protobuf:"varint,5,opt,name=bandWidth" json:"bandWidth,omitempty"`
	// Bit rate (in case of FSK modulation).
	BitRate int32 `protobuf:"varint,6,opt,name=bitRate" json:"bitRate,omitempty"`
	// Spread-factors (in case of LoRa modulation).
	SpreadFactors []int32 `protobuf:"varint,7,rep,packed,name=spreadFactors" json:"spreadFactors,omitempty"`
	// Network-server id.
	NetworkServerID int64 `protobuf:"varint,8,opt,name=networkServerID" json:"networkServerID,omitempty"`
}

func (m *UpdateExtraChannelRequest) Reset()                    { *m = UpdateExtraChannelRequest{} }
func (m *UpdateExtraChannelRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateExtraChannelRequest) ProtoMessage()               {}
func (*UpdateExtraChannelRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{28} }

func (m *UpdateExtraChannelRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UpdateExtraChannelRequest) GetChannelConfigurationID() int64 {
	if m != nil {
		return m.ChannelConfigurationID
	}
	return 0
}

func (m *UpdateExtraChannelRequest) GetModulation() Modulation {
	if m != nil {
		return m.Modulation
	}
	return Modulation_LORA
}

func (m *UpdateExtraChannelRequest) GetFrequency() int32 {
	if m != nil {
		return m.Frequency
	}
	return 0
}

func (m *UpdateExtraChannelRequest) GetBandWidth() int32 {
	if m != nil {
		return m.BandWidth
	}
	return 0
}

func (m *UpdateExtraChannelRequest) GetBitRate() int32 {
	if m != nil {
		return m.BitRate
	}
	return 0
}

func (m *UpdateExtraChannelRequest) GetSpreadFactors() []int32 {
	if m != nil {
		return m.SpreadFactors
	}
	return nil
}

func (m *UpdateExtraChannelRequest) GetNetworkServerID() int64 {
	if m != nil {
		return m.NetworkServerID
	}
	return 0
}

type UpdateExtraChannelResponse struct {
}

func (m *UpdateExtraChannelResponse) Reset()                    { *m = UpdateExtraChannelResponse{} }
func (m *UpdateExtraChannelResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateExtraChannelResponse) ProtoMessage()               {}
func (*UpdateExtraChannelResponse) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{29} }

type DeleteExtraChannelRequest struct {
	// ID of the extra channel.
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// Network-server id.
	NetworkServerID int64 `protobuf:"varint,2,opt,name=networkServerID" json:"networkServerID,omitempty"`
}

func (m *DeleteExtraChannelRequest) Reset()                    { *m = DeleteExtraChannelRequest{} }
func (m *DeleteExtraChannelRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteExtraChannelRequest) ProtoMessage()               {}
func (*DeleteExtraChannelRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{30} }

func (m *DeleteExtraChannelRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DeleteExtraChannelRequest) GetNetworkServerID() int64 {
	if m != nil {
		return m.NetworkServerID
	}
	return 0
}

type DeleteExtraChannelResponse struct {
}

func (m *DeleteExtraChannelResponse) Reset()                    { *m = DeleteExtraChannelResponse{} }
func (m *DeleteExtraChannelResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteExtraChannelResponse) ProtoMessage()               {}
func (*DeleteExtraChannelResponse) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{31} }

type GetExtraChannelResponse struct {
	// ID of the extra channel.
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// ID of the channel-configuration.
	ChannelConfigurationID int64 `protobuf:"varint,2,opt,name=channelConfigurationID" json:"channelConfigurationID,omitempty"`
	// Created-at timestamp.
	CreatedAt string `protobuf:"bytes,3,opt,name=createdAt" json:"createdAt,omitempty"`
	// Updated-at timestamp.
	UpdatedAt string `protobuf:"bytes,4,opt,name=updatedAt" json:"updatedAt,omitempty"`
	// Modulation.
	Modulation Modulation `protobuf:"varint,5,opt,name=modulation,enum=api.Modulation" json:"modulation,omitempty"`
	// Frequency.
	Frequency int32 `protobuf:"varint,6,opt,name=frequency" json:"frequency,omitempty"`
	// Bandwidth.
	Bandwidth int32 `protobuf:"varint,7,opt,name=bandwidth" json:"bandwidth,omitempty"`
	// Bit rate (in case of FSK modulation).
	BitRate int32 `protobuf:"varint,8,opt,name=bitRate" json:"bitRate,omitempty"`
	// Spread-factors (in case of LoRa modulation).
	SpreadFactors []int32 `protobuf:"varint,9,rep,packed,name=spreadFactors" json:"spreadFactors,omitempty"`
}

func (m *GetExtraChannelResponse) Reset()                    { *m = GetExtraChannelResponse{} }
func (m *GetExtraChannelResponse) String() string            { return proto.CompactTextString(m) }
func (*GetExtraChannelResponse) ProtoMessage()               {}
func (*GetExtraChannelResponse) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{32} }

func (m *GetExtraChannelResponse) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GetExtraChannelResponse) GetChannelConfigurationID() int64 {
	if m != nil {
		return m.ChannelConfigurationID
	}
	return 0
}

func (m *GetExtraChannelResponse) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *GetExtraChannelResponse) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

func (m *GetExtraChannelResponse) GetModulation() Modulation {
	if m != nil {
		return m.Modulation
	}
	return Modulation_LORA
}

func (m *GetExtraChannelResponse) GetFrequency() int32 {
	if m != nil {
		return m.Frequency
	}
	return 0
}

func (m *GetExtraChannelResponse) GetBandwidth() int32 {
	if m != nil {
		return m.Bandwidth
	}
	return 0
}

func (m *GetExtraChannelResponse) GetBitRate() int32 {
	if m != nil {
		return m.BitRate
	}
	return 0
}

func (m *GetExtraChannelResponse) GetSpreadFactors() []int32 {
	if m != nil {
		return m.SpreadFactors
	}
	return nil
}

type GetExtraChannelsForChannelConfigurationIDRequest struct {
	// ID of the channel-configuration.
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// Network-server id.
	NetworkServerID int64 `protobuf:"varint,2,opt,name=networkServerID" json:"networkServerID,omitempty"`
}

func (m *GetExtraChannelsForChannelConfigurationIDRequest) Reset() {
	*m = GetExtraChannelsForChannelConfigurationIDRequest{}
}
func (m *GetExtraChannelsForChannelConfigurationIDRequest) String() string {
	return proto.CompactTextString(m)
}
func (*GetExtraChannelsForChannelConfigurationIDRequest) ProtoMessage() {}
func (*GetExtraChannelsForChannelConfigurationIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor5, []int{33}
}

func (m *GetExtraChannelsForChannelConfigurationIDRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GetExtraChannelsForChannelConfigurationIDRequest) GetNetworkServerID() int64 {
	if m != nil {
		return m.NetworkServerID
	}
	return 0
}

type GetExtraChannelsForChannelConfigurationIDResponse struct {
	// Result-set.
	Result []*GetExtraChannelResponse `protobuf:"bytes,1,rep,name=result" json:"result,omitempty"`
}

func (m *GetExtraChannelsForChannelConfigurationIDResponse) Reset() {
	*m = GetExtraChannelsForChannelConfigurationIDResponse{}
}
func (m *GetExtraChannelsForChannelConfigurationIDResponse) String() string {
	return proto.CompactTextString(m)
}
func (*GetExtraChannelsForChannelConfigurationIDResponse) ProtoMessage() {}
func (*GetExtraChannelsForChannelConfigurationIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor5, []int{34}
}

func (m *GetExtraChannelsForChannelConfigurationIDResponse) GetResult() []*GetExtraChannelResponse {
	if m != nil {
		return m.Result
	}
	return nil
}

type PingRX struct {
	// Hex encoded mac address.
	Mac string `protobuf:"bytes,1,opt,name=mac" json:"mac,omitempty"`
	// RSSI.
	Rssi int32 `protobuf:"varint,2,opt,name=rssi" json:"rssi,omitempty"`
	// LoRa SNR.
	LoraSNR float64 `protobuf:"fixed64,3,opt,name=loraSNR" json:"loraSNR,omitempty"`
	// Latitude of the gateway -90.0 to 90.0.
	Latitude float64 `protobuf:"fixed64,4,opt,name=latitude" json:"latitude,omitempty"`
	// Longitude of the gateway -180.0 to 180.0.
	Longitude float64 `protobuf:"fixed64,5,opt,name=longitude" json:"longitude,omitempty"`
	// Altitude of the gateway in meters.
	Altitude float64 `protobuf:"fixed64,6,opt,name=altitude" json:"altitude,omitempty"`
}

func (m *PingRX) Reset()                    { *m = PingRX{} }
func (m *PingRX) String() string            { return proto.CompactTextString(m) }
func (*PingRX) ProtoMessage()               {}
func (*PingRX) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{35} }

func (m *PingRX) GetMac() string {
	if m != nil {
		return m.Mac
	}
	return ""
}

func (m *PingRX) GetRssi() int32 {
	if m != nil {
		return m.Rssi
	}
	return 0
}

func (m *PingRX) GetLoraSNR() float64 {
	if m != nil {
		return m.LoraSNR
	}
	return 0
}

func (m *PingRX) GetLatitude() float64 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *PingRX) GetLongitude() float64 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *PingRX) GetAltitude() float64 {
	if m != nil {
		return m.Altitude
	}
	return 0
}

type GetLastPingRequest struct {
	// Hex encoded mac address.
	Mac string `protobuf:"bytes,1,opt,name=mac" json:"mac,omitempty"`
}

func (m *GetLastPingRequest) Reset()                    { *m = GetLastPingRequest{} }
func (m *GetLastPingRequest) String() string            { return proto.CompactTextString(m) }
func (*GetLastPingRequest) ProtoMessage()               {}
func (*GetLastPingRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{36} }

func (m *GetLastPingRequest) GetMac() string {
	if m != nil {
		return m.Mac
	}
	return ""
}

type GetLastPingResponse struct {
	// Created at.
	CreatedAt string `protobuf:"bytes,1,opt,name=createdAt" json:"createdAt,omitempty"`
	// Frequency.
	Frequency uint32 `protobuf:"varint,2,opt,name=frequency" json:"frequency,omitempty"`
	// Data-rate.
	Dr uint32 `protobuf:"varint,3,opt,name=dr" json:"dr,omitempty"`
	// Gateways and meta-data of reception.
	PingRX []*PingRX `protobuf:"bytes,4,rep,name=pingRX" json:"pingRX,omitempty"`
}

func (m *GetLastPingResponse) Reset()                    { *m = GetLastPingResponse{} }
func (m *GetLastPingResponse) String() string            { return proto.CompactTextString(m) }
func (*GetLastPingResponse) ProtoMessage()               {}
func (*GetLastPingResponse) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{37} }

func (m *GetLastPingResponse) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *GetLastPingResponse) GetFrequency() uint32 {
	if m != nil {
		return m.Frequency
	}
	return 0
}

func (m *GetLastPingResponse) GetDr() uint32 {
	if m != nil {
		return m.Dr
	}
	return 0
}

func (m *GetLastPingResponse) GetPingRX() []*PingRX {
	if m != nil {
		return m.PingRX
	}
	return nil
}

type StreamGatewayFrameLogsRequest struct {
	// Hex encoded mac.
	Mac string `protobuf:"bytes,1,opt,name=mac" json:"mac,omitempty"`
}

func (m *StreamGatewayFrameLogsRequest) Reset()                    { *m = StreamGatewayFrameLogsRequest{} }
func (m *StreamGatewayFrameLogsRequest) String() string            { return proto.CompactTextString(m) }
func (*StreamGatewayFrameLogsRequest) ProtoMessage()               {}
func (*StreamGatewayFrameLogsRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{38} }

func (m *StreamGatewayFrameLogsRequest) GetMac() string {
	if m != nil {
		return m.Mac
	}
	return ""
}

type StreamGatewayFrameLogsResponse struct {
	// Contains zero or one uplink frame.
	UplinkFrames []*UplinkFrameLog `protobuf:"bytes,1,rep,name=uplinkFrames" json:"uplinkFrames,omitempty"`
	// Contains zero or one downlink frame.
	DownlinkFrames []*DownlinkFrameLog `protobuf:"bytes,2,rep,name=downlinkFrames" json:"downlinkFrames,omitempty"`
}

func (m *StreamGatewayFrameLogsResponse) Reset()                    { *m = StreamGatewayFrameLogsResponse{} }
func (m *StreamGatewayFrameLogsResponse) String() string            { return proto.CompactTextString(m) }
func (*StreamGatewayFrameLogsResponse) ProtoMessage()               {}
func (*StreamGatewayFrameLogsResponse) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{39} }

func (m *StreamGatewayFrameLogsResponse) GetUplinkFrames() []*UplinkFrameLog {
	if m != nil {
		return m.UplinkFrames
	}
	return nil
}

func (m *StreamGatewayFrameLogsResponse) GetDownlinkFrames() []*DownlinkFrameLog {
	if m != nil {
		return m.DownlinkFrames
	}
	return nil
}

func init() {
	proto.RegisterType((*CreateGatewayRequest)(nil), "api.CreateGatewayRequest")
	proto.RegisterType((*CreateGatewayResponse)(nil), "api.CreateGatewayResponse")
	proto.RegisterType((*GetGatewayRequest)(nil), "api.GetGatewayRequest")
	proto.RegisterType((*GetGatewayResponse)(nil), "api.GetGatewayResponse")
	proto.RegisterType((*DeleteGatewayRequest)(nil), "api.DeleteGatewayRequest")
	proto.RegisterType((*GenerateGatewayTokenRequest)(nil), "api.GenerateGatewayTokenRequest")
	proto.RegisterType((*GenerateGatewayTokenResponse)(nil), "api.GenerateGatewayTokenResponse")
	proto.RegisterType((*DeleteGatewayResponse)(nil), "api.DeleteGatewayResponse")
	proto.RegisterType((*ListGatewayRequest)(nil), "api.ListGatewayRequest")
	proto.RegisterType((*ListGatewayItem)(nil), "api.ListGatewayItem")
	proto.RegisterType((*ListGatewayResponse)(nil), "api.ListGatewayResponse")
	proto.RegisterType((*UpdateGatewayRequest)(nil), "api.UpdateGatewayRequest")
	proto.RegisterType((*UpdateGatewayResponse)(nil), "api.UpdateGatewayResponse")
	proto.RegisterType((*GatewayStats)(nil), "api.GatewayStats")
	proto.RegisterType((*GetGatewayStatsRequest)(nil), "api.GetGatewayStatsRequest")
	proto.RegisterType((*GetGatewayStatsResponse)(nil), "api.GetGatewayStatsResponse")
	proto.RegisterType((*CreateChannelConfigurationRequest)(nil), "api.CreateChannelConfigurationRequest")
	proto.RegisterType((*CreateChannelConfigurationResponse)(nil), "api.CreateChannelConfigurationResponse")
	proto.RegisterType((*GetChannelConfigurationRequest)(nil), "api.GetChannelConfigurationRequest")
	proto.RegisterType((*GetChannelConfigurationResponse)(nil), "api.GetChannelConfigurationResponse")
	proto.RegisterType((*UpdateChannelConfigurationRequest)(nil), "api.UpdateChannelConfigurationRequest")
	proto.RegisterType((*UpdateChannelConfigurationResponse)(nil), "api.UpdateChannelConfigurationResponse")
	proto.RegisterType((*DeleteChannelConfigurationRequest)(nil), "api.DeleteChannelConfigurationRequest")
	proto.RegisterType((*DeleteChannelConfigurationResponse)(nil), "api.DeleteChannelConfigurationResponse")
	proto.RegisterType((*ListChannelConfigurationsRequest)(nil), "api.ListChannelConfigurationsRequest")
	proto.RegisterType((*ListChannelConfigurationsResponse)(nil), "api.ListChannelConfigurationsResponse")
	proto.RegisterType((*CreateExtraChannelRequest)(nil), "api.CreateExtraChannelRequest")
	proto.RegisterType((*CreateExtraChannelResponse)(nil), "api.CreateExtraChannelResponse")
	proto.RegisterType((*UpdateExtraChannelRequest)(nil), "api.UpdateExtraChannelRequest")
	proto.RegisterType((*UpdateExtraChannelResponse)(nil), "api.UpdateExtraChannelResponse")
	proto.RegisterType((*DeleteExtraChannelRequest)(nil), "api.DeleteExtraChannelRequest")
	proto.RegisterType((*DeleteExtraChannelResponse)(nil), "api.DeleteExtraChannelResponse")
	proto.RegisterType((*GetExtraChannelResponse)(nil), "api.GetExtraChannelResponse")
	proto.RegisterType((*GetExtraChannelsForChannelConfigurationIDRequest)(nil), "api.GetExtraChannelsForChannelConfigurationIDRequest")
	proto.RegisterType((*GetExtraChannelsForChannelConfigurationIDResponse)(nil), "api.GetExtraChannelsForChannelConfigurationIDResponse")
	proto.RegisterType((*PingRX)(nil), "api.PingRX")
	proto.RegisterType((*GetLastPingRequest)(nil), "api.GetLastPingRequest")
	proto.RegisterType((*GetLastPingResponse)(nil), "api.GetLastPingResponse")
	proto.RegisterType((*StreamGatewayFrameLogsRequest)(nil), "api.StreamGatewayFrameLogsRequest")
	proto.RegisterType((*StreamGatewayFrameLogsResponse)(nil), "api.StreamGatewayFrameLogsResponse")
	proto.RegisterEnum("api.Modulation", Modulation_name, Modulation_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Gateway service

type GatewayClient interface {
	// CreateChannelConfiguration creates the given channel-configuration.
	CreateChannelConfiguration(ctx context.Context, in *CreateChannelConfigurationRequest, opts ...grpc.CallOption) (*CreateChannelConfigurationResponse, error)
	// GetChannelConfiguration returns the channel-configuration for the given ID.
	GetChannelConfiguration(ctx context.Context, in *GetChannelConfigurationRequest, opts ...grpc.CallOption) (*GetChannelConfigurationResponse, error)
	// UpdateChannelConfiguration updates the given channel-configuration.
	UpdateChannelConfiguration(ctx context.Context, in *UpdateChannelConfigurationRequest, opts ...grpc.CallOption) (*UpdateChannelConfigurationResponse, error)
	// DeleteChannelConfiguration deletes the channel-configuration matching the
	// given ID.
	DeleteChannelConfiguration(ctx context.Context, in *DeleteChannelConfigurationRequest, opts ...grpc.CallOption) (*DeleteChannelConfigurationResponse, error)
	// ListChannelConfigurations returns all channel-configurations.
	ListChannelConfigurations(ctx context.Context, in *ListChannelConfigurationsRequest, opts ...grpc.CallOption) (*ListChannelConfigurationsResponse, error)
	// CreateExtraChannel creates the given extra channel.
	CreateExtraChannel(ctx context.Context, in *CreateExtraChannelRequest, opts ...grpc.CallOption) (*CreateExtraChannelResponse, error)
	// UpdateExtraChannel updates the given extra channel.
	UpdateExtraChannel(ctx context.Context, in *UpdateExtraChannelRequest, opts ...grpc.CallOption) (*UpdateExtraChannelResponse, error)
	// DeleteExtraChannel deletes the extra channel matching the given id.
	DeleteExtraChannel(ctx context.Context, in *DeleteExtraChannelRequest, opts ...grpc.CallOption) (*DeleteExtraChannelResponse, error)
	// GetExtraChannelsForChannelConfigurationID returns the extra channels for
	// the given channel-configuration id.
	GetExtraChannelsForChannelConfigurationID(ctx context.Context, in *GetExtraChannelsForChannelConfigurationIDRequest, opts ...grpc.CallOption) (*GetExtraChannelsForChannelConfigurationIDResponse, error)
	// Create creates the given gateway.
	Create(ctx context.Context, in *CreateGatewayRequest, opts ...grpc.CallOption) (*CreateGatewayResponse, error)
	// Get returns the gateway for the requested mac address.
	Get(ctx context.Context, in *GetGatewayRequest, opts ...grpc.CallOption) (*GetGatewayResponse, error)
	// Update updates the gateway matching the given mac address.
	Update(ctx context.Context, in *UpdateGatewayRequest, opts ...grpc.CallOption) (*UpdateGatewayResponse, error)
	// Delete deletes the gateway matching the given mac address.
	Delete(ctx context.Context, in *DeleteGatewayRequest, opts ...grpc.CallOption) (*DeleteGatewayResponse, error)
	// GenerateToken issues a JWT token which can be used by the gateway
	// for authentication.
	GenerateToken(ctx context.Context, in *GenerateGatewayTokenRequest, opts ...grpc.CallOption) (*GenerateGatewayTokenResponse, error)
	// List lists the gateways.
	List(ctx context.Context, in *ListGatewayRequest, opts ...grpc.CallOption) (*ListGatewayResponse, error)
	// GetStats lists the gateway stats given the query parameters.
	GetStats(ctx context.Context, in *GetGatewayStatsRequest, opts ...grpc.CallOption) (*GetGatewayStatsResponse, error)
	// GetLastPing returns the last emitted ping and gateways receiving this ping.
	GetLastPing(ctx context.Context, in *GetLastPingRequest, opts ...grpc.CallOption) (*GetLastPingResponse, error)
	// StreamFrameLogs streams the uplink and downlink frame-logs for the given mac.
	// Note: these are the raw LoRaWAN frames and this endpoint is intended for debugging.
	StreamFrameLogs(ctx context.Context, in *StreamGatewayFrameLogsRequest, opts ...grpc.CallOption) (Gateway_StreamFrameLogsClient, error)
}

type gatewayClient struct {
	cc *grpc.ClientConn
}

func NewGatewayClient(cc *grpc.ClientConn) GatewayClient {
	return &gatewayClient{cc}
}

func (c *gatewayClient) CreateChannelConfiguration(ctx context.Context, in *CreateChannelConfigurationRequest, opts ...grpc.CallOption) (*CreateChannelConfigurationResponse, error) {
	out := new(CreateChannelConfigurationResponse)
	err := grpc.Invoke(ctx, "/api.Gateway/CreateChannelConfiguration", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetChannelConfiguration(ctx context.Context, in *GetChannelConfigurationRequest, opts ...grpc.CallOption) (*GetChannelConfigurationResponse, error) {
	out := new(GetChannelConfigurationResponse)
	err := grpc.Invoke(ctx, "/api.Gateway/GetChannelConfiguration", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) UpdateChannelConfiguration(ctx context.Context, in *UpdateChannelConfigurationRequest, opts ...grpc.CallOption) (*UpdateChannelConfigurationResponse, error) {
	out := new(UpdateChannelConfigurationResponse)
	err := grpc.Invoke(ctx, "/api.Gateway/UpdateChannelConfiguration", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) DeleteChannelConfiguration(ctx context.Context, in *DeleteChannelConfigurationRequest, opts ...grpc.CallOption) (*DeleteChannelConfigurationResponse, error) {
	out := new(DeleteChannelConfigurationResponse)
	err := grpc.Invoke(ctx, "/api.Gateway/DeleteChannelConfiguration", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) ListChannelConfigurations(ctx context.Context, in *ListChannelConfigurationsRequest, opts ...grpc.CallOption) (*ListChannelConfigurationsResponse, error) {
	out := new(ListChannelConfigurationsResponse)
	err := grpc.Invoke(ctx, "/api.Gateway/ListChannelConfigurations", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) CreateExtraChannel(ctx context.Context, in *CreateExtraChannelRequest, opts ...grpc.CallOption) (*CreateExtraChannelResponse, error) {
	out := new(CreateExtraChannelResponse)
	err := grpc.Invoke(ctx, "/api.Gateway/CreateExtraChannel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) UpdateExtraChannel(ctx context.Context, in *UpdateExtraChannelRequest, opts ...grpc.CallOption) (*UpdateExtraChannelResponse, error) {
	out := new(UpdateExtraChannelResponse)
	err := grpc.Invoke(ctx, "/api.Gateway/UpdateExtraChannel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) DeleteExtraChannel(ctx context.Context, in *DeleteExtraChannelRequest, opts ...grpc.CallOption) (*DeleteExtraChannelResponse, error) {
	out := new(DeleteExtraChannelResponse)
	err := grpc.Invoke(ctx, "/api.Gateway/DeleteExtraChannel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetExtraChannelsForChannelConfigurationID(ctx context.Context, in *GetExtraChannelsForChannelConfigurationIDRequest, opts ...grpc.CallOption) (*GetExtraChannelsForChannelConfigurationIDResponse, error) {
	out := new(GetExtraChannelsForChannelConfigurationIDResponse)
	err := grpc.Invoke(ctx, "/api.Gateway/GetExtraChannelsForChannelConfigurationID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) Create(ctx context.Context, in *CreateGatewayRequest, opts ...grpc.CallOption) (*CreateGatewayResponse, error) {
	out := new(CreateGatewayResponse)
	err := grpc.Invoke(ctx, "/api.Gateway/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) Get(ctx context.Context, in *GetGatewayRequest, opts ...grpc.CallOption) (*GetGatewayResponse, error) {
	out := new(GetGatewayResponse)
	err := grpc.Invoke(ctx, "/api.Gateway/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) Update(ctx context.Context, in *UpdateGatewayRequest, opts ...grpc.CallOption) (*UpdateGatewayResponse, error) {
	out := new(UpdateGatewayResponse)
	err := grpc.Invoke(ctx, "/api.Gateway/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) Delete(ctx context.Context, in *DeleteGatewayRequest, opts ...grpc.CallOption) (*DeleteGatewayResponse, error) {
	out := new(DeleteGatewayResponse)
	err := grpc.Invoke(ctx, "/api.Gateway/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GenerateToken(ctx context.Context, in *GenerateGatewayTokenRequest, opts ...grpc.CallOption) (*GenerateGatewayTokenResponse, error) {
	out := new(GenerateGatewayTokenResponse)
	err := grpc.Invoke(ctx, "/api.Gateway/GenerateToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) List(ctx context.Context, in *ListGatewayRequest, opts ...grpc.CallOption) (*ListGatewayResponse, error) {
	out := new(ListGatewayResponse)
	err := grpc.Invoke(ctx, "/api.Gateway/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetStats(ctx context.Context, in *GetGatewayStatsRequest, opts ...grpc.CallOption) (*GetGatewayStatsResponse, error) {
	out := new(GetGatewayStatsResponse)
	err := grpc.Invoke(ctx, "/api.Gateway/GetStats", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetLastPing(ctx context.Context, in *GetLastPingRequest, opts ...grpc.CallOption) (*GetLastPingResponse, error) {
	out := new(GetLastPingResponse)
	err := grpc.Invoke(ctx, "/api.Gateway/GetLastPing", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) StreamFrameLogs(ctx context.Context, in *StreamGatewayFrameLogsRequest, opts ...grpc.CallOption) (Gateway_StreamFrameLogsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Gateway_serviceDesc.Streams[0], c.cc, "/api.Gateway/StreamFrameLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &gatewayStreamFrameLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Gateway_StreamFrameLogsClient interface {
	Recv() (*StreamGatewayFrameLogsResponse, error)
	grpc.ClientStream
}

type gatewayStreamFrameLogsClient struct {
	grpc.ClientStream
}

func (x *gatewayStreamFrameLogsClient) Recv() (*StreamGatewayFrameLogsResponse, error) {
	m := new(StreamGatewayFrameLogsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Gateway service

type GatewayServer interface {
	// CreateChannelConfiguration creates the given channel-configuration.
	CreateChannelConfiguration(context.Context, *CreateChannelConfigurationRequest) (*CreateChannelConfigurationResponse, error)
	// GetChannelConfiguration returns the channel-configuration for the given ID.
	GetChannelConfiguration(context.Context, *GetChannelConfigurationRequest) (*GetChannelConfigurationResponse, error)
	// UpdateChannelConfiguration updates the given channel-configuration.
	UpdateChannelConfiguration(context.Context, *UpdateChannelConfigurationRequest) (*UpdateChannelConfigurationResponse, error)
	// DeleteChannelConfiguration deletes the channel-configuration matching the
	// given ID.
	DeleteChannelConfiguration(context.Context, *DeleteChannelConfigurationRequest) (*DeleteChannelConfigurationResponse, error)
	// ListChannelConfigurations returns all channel-configurations.
	ListChannelConfigurations(context.Context, *ListChannelConfigurationsRequest) (*ListChannelConfigurationsResponse, error)
	// CreateExtraChannel creates the given extra channel.
	CreateExtraChannel(context.Context, *CreateExtraChannelRequest) (*CreateExtraChannelResponse, error)
	// UpdateExtraChannel updates the given extra channel.
	UpdateExtraChannel(context.Context, *UpdateExtraChannelRequest) (*UpdateExtraChannelResponse, error)
	// DeleteExtraChannel deletes the extra channel matching the given id.
	DeleteExtraChannel(context.Context, *DeleteExtraChannelRequest) (*DeleteExtraChannelResponse, error)
	// GetExtraChannelsForChannelConfigurationID returns the extra channels for
	// the given channel-configuration id.
	GetExtraChannelsForChannelConfigurationID(context.Context, *GetExtraChannelsForChannelConfigurationIDRequest) (*GetExtraChannelsForChannelConfigurationIDResponse, error)
	// Create creates the given gateway.
	Create(context.Context, *CreateGatewayRequest) (*CreateGatewayResponse, error)
	// Get returns the gateway for the requested mac address.
	Get(context.Context, *GetGatewayRequest) (*GetGatewayResponse, error)
	// Update updates the gateway matching the given mac address.
	Update(context.Context, *UpdateGatewayRequest) (*UpdateGatewayResponse, error)
	// Delete deletes the gateway matching the given mac address.
	Delete(context.Context, *DeleteGatewayRequest) (*DeleteGatewayResponse, error)
	// GenerateToken issues a JWT token which can be used by the gateway
	// for authentication.
	GenerateToken(context.Context, *GenerateGatewayTokenRequest) (*GenerateGatewayTokenResponse, error)
	// List lists the gateways.
	List(context.Context, *ListGatewayRequest) (*ListGatewayResponse, error)
	// GetStats lists the gateway stats given the query parameters.
	GetStats(context.Context, *GetGatewayStatsRequest) (*GetGatewayStatsResponse, error)
	// GetLastPing returns the last emitted ping and gateways receiving this ping.
	GetLastPing(context.Context, *GetLastPingRequest) (*GetLastPingResponse, error)
	// StreamFrameLogs streams the uplink and downlink frame-logs for the given mac.
	// Note: these are the raw LoRaWAN frames and this endpoint is intended for debugging.
	StreamFrameLogs(*StreamGatewayFrameLogsRequest, Gateway_StreamFrameLogsServer) error
}

func RegisterGatewayServer(s *grpc.Server, srv GatewayServer) {
	s.RegisterService(&_Gateway_serviceDesc, srv)
}

func _Gateway_CreateChannelConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChannelConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).CreateChannelConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Gateway/CreateChannelConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).CreateChannelConfiguration(ctx, req.(*CreateChannelConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetChannelConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChannelConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetChannelConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Gateway/GetChannelConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetChannelConfiguration(ctx, req.(*GetChannelConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_UpdateChannelConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChannelConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).UpdateChannelConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Gateway/UpdateChannelConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).UpdateChannelConfiguration(ctx, req.(*UpdateChannelConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_DeleteChannelConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteChannelConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).DeleteChannelConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Gateway/DeleteChannelConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).DeleteChannelConfiguration(ctx, req.(*DeleteChannelConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_ListChannelConfigurations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListChannelConfigurationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).ListChannelConfigurations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Gateway/ListChannelConfigurations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).ListChannelConfigurations(ctx, req.(*ListChannelConfigurationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_CreateExtraChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateExtraChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).CreateExtraChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Gateway/CreateExtraChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).CreateExtraChannel(ctx, req.(*CreateExtraChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_UpdateExtraChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateExtraChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).UpdateExtraChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Gateway/UpdateExtraChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).UpdateExtraChannel(ctx, req.(*UpdateExtraChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_DeleteExtraChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteExtraChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).DeleteExtraChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Gateway/DeleteExtraChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).DeleteExtraChannel(ctx, req.(*DeleteExtraChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetExtraChannelsForChannelConfigurationID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExtraChannelsForChannelConfigurationIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetExtraChannelsForChannelConfigurationID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Gateway/GetExtraChannelsForChannelConfigurationID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetExtraChannelsForChannelConfigurationID(ctx, req.(*GetExtraChannelsForChannelConfigurationIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Gateway/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).Create(ctx, req.(*CreateGatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Gateway/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).Get(ctx, req.(*GetGatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Gateway/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).Update(ctx, req.(*UpdateGatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Gateway/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).Delete(ctx, req.(*DeleteGatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GenerateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateGatewayTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GenerateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Gateway/GenerateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GenerateToken(ctx, req.(*GenerateGatewayTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Gateway/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).List(ctx, req.(*ListGatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGatewayStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Gateway/GetStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetStats(ctx, req.(*GetGatewayStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetLastPing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLastPingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetLastPing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Gateway/GetLastPing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetLastPing(ctx, req.(*GetLastPingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_StreamFrameLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamGatewayFrameLogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GatewayServer).StreamFrameLogs(m, &gatewayStreamFrameLogsServer{stream})
}

type Gateway_StreamFrameLogsServer interface {
	Send(*StreamGatewayFrameLogsResponse) error
	grpc.ServerStream
}

type gatewayStreamFrameLogsServer struct {
	grpc.ServerStream
}

func (x *gatewayStreamFrameLogsServer) Send(m *StreamGatewayFrameLogsResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Gateway_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Gateway",
	HandlerType: (*GatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateChannelConfiguration",
			Handler:    _Gateway_CreateChannelConfiguration_Handler,
		},
		{
			MethodName: "GetChannelConfiguration",
			Handler:    _Gateway_GetChannelConfiguration_Handler,
		},
		{
			MethodName: "UpdateChannelConfiguration",
			Handler:    _Gateway_UpdateChannelConfiguration_Handler,
		},
		{
			MethodName: "DeleteChannelConfiguration",
			Handler:    _Gateway_DeleteChannelConfiguration_Handler,
		},
		{
			MethodName: "ListChannelConfigurations",
			Handler:    _Gateway_ListChannelConfigurations_Handler,
		},
		{
			MethodName: "CreateExtraChannel",
			Handler:    _Gateway_CreateExtraChannel_Handler,
		},
		{
			MethodName: "UpdateExtraChannel",
			Handler:    _Gateway_UpdateExtraChannel_Handler,
		},
		{
			MethodName: "DeleteExtraChannel",
			Handler:    _Gateway_DeleteExtraChannel_Handler,
		},
		{
			MethodName: "GetExtraChannelsForChannelConfigurationID",
			Handler:    _Gateway_GetExtraChannelsForChannelConfigurationID_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Gateway_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Gateway_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Gateway_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Gateway_Delete_Handler,
		},
		{
			MethodName: "GenerateToken",
			Handler:    _Gateway_GenerateToken_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Gateway_List_Handler,
		},
		{
			MethodName: "GetStats",
			Handler:    _Gateway_GetStats_Handler,
		},
		{
			MethodName: "GetLastPing",
			Handler:    _Gateway_GetLastPing_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamFrameLogs",
			Handler:       _Gateway_StreamFrameLogs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "gateway.proto",
}

func init() { proto.RegisterFile("gateway.proto", fileDescriptor5) }

var fileDescriptor5 = []byte{
	// 1902 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x59, 0xcd, 0x6f, 0xdb, 0x46,
	0x16, 0x5f, 0x8a, 0x92, 0x2c, 0x3d, 0x7f, 0x66, 0xfc, 0x25, 0xd3, 0x5a, 0x47, 0xa6, 0x1d, 0xaf,
	0xe2, 0xcd, 0x5a, 0xce, 0xc7, 0x66, 0x17, 0x8b, 0xdd, 0x05, 0x02, 0x3b, 0x36, 0x82, 0xb8, 0x49,
	0x40, 0x27, 0xe8, 0x07, 0x5a, 0x14, 0x13, 0x71, 0x2c, 0x13, 0xa6, 0x48, 0x95, 0x1c, 0xc5, 0x49,
	0x03, 0xa3, 0x45, 0x0e, 0xbd, 0xf5, 0xd2, 0x02, 0x49, 0x2f, 0x6d, 0x81, 0x1e, 0xfb, 0x27, 0xf4,
	0x1f, 0x28, 0xd0, 0x6b, 0x2f, 0x45, 0xcf, 0x45, 0xff, 0x8c, 0xa2, 0xe0, 0x70, 0x48, 0x91, 0xd4,
	0x90, 0x92, 0x9a, 0x06, 0xe8, 0xa1, 0x37, 0xcd, 0x9b, 0x8f, 0xf7, 0x7b, 0xef, 0xfd, 0xde, 0x9b,
	0xc7, 0x11, 0x4c, 0xb6, 0x30, 0x25, 0xa7, 0xf8, 0xc9, 0x56, 0xc7, 0xb1, 0xa9, 0x8d, 0x64, 0xdc,
	0x31, 0x94, 0x6a, 0xcb, 0xb6, 0x5b, 0x26, 0x69, 0xe0, 0x8e, 0xd1, 0xc0, 0x96, 0x65, 0x53, 0x4c,
	0x0d, 0xdb, 0x72, 0xfd, 0x25, 0xca, 0x44, 0xd3, 0x6e, 0xb7, 0x6d, 0xcb, 0x1f, 0xa9, 0xcf, 0x64,
	0x98, 0xdb, 0x71, 0x08, 0xa6, 0x64, 0xdf, 0x3f, 0x48, 0x23, 0xef, 0x75, 0x89, 0x4b, 0xd1, 0x0c,
	0xc8, 0x6d, 0xdc, 0xac, 0x48, 0x35, 0xa9, 0x5e, 0xd6, 0xbc, 0x9f, 0x08, 0x41, 0xde, 0xc2, 0x6d,
	0x52, 0xc9, 0x31, 0x11, 0xfb, 0x8d, 0x6a, 0x30, 0xae, 0x13, 0xb7, 0xe9, 0x18, 0x1d, 0x4f, 0x45,
	0x45, 0x66, 0x53, 0x51, 0x11, 0x52, 0xa0, 0x64, 0x62, 0x6a, 0xd0, 0xae, 0x4e, 0x2a, 0xf9, 0x9a,
	0x54, 0x97, 0xb4, 0x70, 0x8c, 0xaa, 0x50, 0x36, 0x6d, 0xab, 0xe5, 0x4f, 0x16, 0xd8, 0x64, 0x4f,
	0xe0, 0xed, 0xc4, 0x26, 0xdf, 0x59, 0xf4, 0x77, 0x06, 0x63, 0xb4, 0x01, 0x53, 0xb6, 0xd3, 0xc2,
	0x96, 0xf1, 0x3e, 0xb3, 0xed, 0xd6, 0x6e, 0x65, 0xac, 0x26, 0xd5, 0x65, 0x2d, 0x21, 0x45, 0xd7,
	0x61, 0xa1, 0x79, 0x8c, 0x2d, 0x8b, 0x98, 0x3b, 0xb6, 0x75, 0x64, 0xb4, 0xba, 0x4e, 0xb0, 0xbe,
	0xc4, 0xd6, 0xa7, 0xcc, 0x7a, 0xb6, 0x76, 0x0c, 0xab, 0x55, 0x29, 0xd7, 0xa4, 0x7a, 0x49, 0x63,
	0xbf, 0x51, 0x1d, 0xa6, 0x2d, 0x42, 0x4f, 0x6d, 0xe7, 0xe4, 0x90, 0x38, 0x8f, 0x88, 0x73, 0x6b,
	0xb7, 0x02, 0xec, 0x90, 0xa4, 0xd8, 0xdb, 0x4d, 0x71, 0xcb, 0xad, 0x8c, 0xd7, 0x64, 0xcf, 0x53,
	0xde, 0x6f, 0xcf, 0x9a, 0x36, 0x7e, 0x7c, 0xc7, 0xd6, 0x89, 0x5b, 0x99, 0x60, 0xdb, 0xc2, 0xb1,
	0xba, 0x08, 0xf3, 0x89, 0x18, 0xb8, 0x1d, 0xdb, 0x72, 0x89, 0x7a, 0x01, 0xce, 0xed, 0x13, 0x3a,
	0x28, 0x32, 0xea, 0x2f, 0x32, 0xa0, 0xe8, 0x3a, 0x7f, 0xf7, 0x1f, 0x3c, 0x84, 0x55, 0x28, 0x37,
	0x99, 0xd1, 0xfa, 0x0d, 0xca, 0xa2, 0x57, 0xd6, 0x7a, 0x02, 0x6f, 0xb6, 0xdb, 0xd1, 0xf9, 0x6c,
	0xc9, 0x9f, 0x0d, 0x05, 0x1e, 0xe6, 0x23, 0xc3, 0x71, 0xe9, 0x21, 0x21, 0xd6, 0x0d, 0xca, 0xa2,
	0x54, 0xd6, 0xa2, 0x22, 0xb4, 0x02, 0x60, 0xe2, 0x70, 0x01, 0xb0, 0x05, 0x11, 0x89, 0x80, 0x40,
	0xe3, 0x23, 0x12, 0x68, 0x62, 0x28, 0x02, 0x4d, 0x66, 0x13, 0x68, 0x2a, 0x9b, 0x40, 0xd3, 0x29,
	0x04, 0x9a, 0x49, 0x10, 0xa8, 0x0e, 0x73, 0xbb, 0xc4, 0x24, 0x83, 0x93, 0x58, 0x6d, 0xc0, 0xf2,
	0x3e, 0xb1, 0x88, 0xd3, 0x23, 0xdb, 0x7d, 0xfb, 0x84, 0x58, 0xe9, 0x1b, 0xae, 0x41, 0x55, 0xbc,
	0x81, 0x93, 0x6c, 0x0e, 0x0a, 0xd4, 0x13, 0xf0, 0x3d, 0xfe, 0xc0, 0x63, 0x74, 0x02, 0x10, 0x67,
	0xf4, 0x27, 0x12, 0xa0, 0x03, 0xc3, 0x4d, 0x72, 0x7a, 0x0e, 0x0a, 0xa6, 0xd1, 0x36, 0x28, 0x3b,
	0xa5, 0xa0, 0xf9, 0x03, 0xb4, 0x00, 0x45, 0xfb, 0xe8, 0xc8, 0x25, 0x94, 0x11, 0xb6, 0xa0, 0xf1,
	0x91, 0x20, 0x78, 0xb2, 0x30, 0x78, 0x01, 0xdd, 0xf3, 0x11, 0xba, 0x07, 0xae, 0x2d, 0xf4, 0x5c,
	0xab, 0xbe, 0xc8, 0xc1, 0x74, 0x04, 0xd4, 0x2d, 0x4a, 0xda, 0xbf, 0x5b, 0xf2, 0xc4, 0x68, 0x9e,
	0xcf, 0xa4, 0x79, 0x21, 0x49, 0xf3, 0x7e, 0x3b, 0x8b, 0x42, 0x3b, 0x05, 0xc4, 0x1a, 0xcb, 0x26,
	0x56, 0x29, 0x85, 0x58, 0xe5, 0x04, 0xb1, 0x9a, 0x30, 0x1b, 0x8b, 0x16, 0x0f, 0xfa, 0x0a, 0x00,
	0xb5, 0x29, 0x36, 0x77, 0xec, 0xae, 0x15, 0xc4, 0x2c, 0x22, 0x41, 0x97, 0xa0, 0xe8, 0x10, 0xb7,
	0x6b, 0x7a, 0x81, 0x93, 0xeb, 0xe3, 0x57, 0xe6, 0xb6, 0x70, 0xc7, 0xd8, 0x4a, 0xb8, 0x58, 0xe3,
	0x6b, 0xd4, 0x1f, 0x72, 0x30, 0xf7, 0x80, 0x19, 0xfd, 0xe7, 0x1d, 0x34, 0xe0, 0x0e, 0x0a, 0xe2,
	0x07, 0x29, 0xf1, 0x1b, 0xef, 0xbf, 0x59, 0x12, 0x9e, 0xe5, 0x79, 0xf8, 0xb3, 0x04, 0x13, 0x5c,
	0x76, 0x48, 0x31, 0x75, 0x3d, 0x3f, 0x50, 0xa3, 0x4d, 0x5c, 0x8a, 0xdb, 0x1d, 0xee, 0xf1, 0x9e,
	0x00, 0x5d, 0x82, 0x73, 0xce, 0xe3, 0x7b, 0xb8, 0x79, 0x42, 0xa8, 0xab, 0x91, 0x26, 0x31, 0x1e,
	0x11, 0x9d, 0x27, 0x65, 0xff, 0x04, 0xda, 0x86, 0xd9, 0x3e, 0xe1, 0xdd, 0xdb, 0x2c, 0x32, 0x05,
	0x4d, 0x34, 0xe5, 0x9d, 0x4f, 0xfb, 0xce, 0xcf, 0xfb, 0xe7, 0xf7, 0x4d, 0xa0, 0x4d, 0x98, 0x09,
	0x85, 0x37, 0xdb, 0x06, 0xa5, 0x44, 0x67, 0xa1, 0x2b, 0x68, 0x7d, 0x72, 0xaf, 0xe0, 0x2c, 0xf4,
	0xee, 0x46, 0x66, 0x6b, 0x3a, 0xbd, 0x14, 0x28, 0x19, 0x16, 0x25, 0xce, 0x23, 0x6c, 0x72, 0x8a,
	0x85, 0x63, 0x2f, 0xdc, 0x2e, 0xc5, 0x0e, 0xbd, 0x1f, 0x7a, 0xc9, 0x67, 0x5a, 0x42, 0x8a, 0x54,
	0x98, 0x20, 0x96, 0xde, 0x5b, 0xe5, 0xe7, 0x7c, 0x4c, 0xa6, 0xee, 0xc2, 0x62, 0x1f, 0x26, 0x9e,
	0x5a, 0x17, 0xc3, 0xd4, 0x91, 0x58, 0xea, 0x9c, 0x63, 0xa9, 0x13, 0x5b, 0x1a, 0xe4, 0xcd, 0x19,
	0xac, 0xfa, 0x6d, 0xc3, 0x8e, 0x80, 0x40, 0x81, 0x91, 0x41, 0xc6, 0x48, 0x91, 0x8c, 0x51, 0xa0,
	0xc4, 0x39, 0xe7, 0xb2, 0x04, 0x2d, 0x68, 0xe1, 0x58, 0x54, 0x4b, 0x64, 0x61, 0x2d, 0x51, 0xaf,
	0x81, 0x9a, 0xa5, 0x9e, 0xdb, 0x33, 0x05, 0x39, 0x43, 0x67, 0xda, 0x65, 0x2d, 0x67, 0xe8, 0xea,
	0x5b, 0xb0, 0xb2, 0x4f, 0x68, 0x16, 0xe2, 0xc4, 0x0e, 0x11, 0xa2, 0x9c, 0x18, 0xd1, 0xb7, 0x12,
	0x9c, 0x4f, 0x3d, 0x5c, 0x8c, 0x47, 0x58, 0x51, 0xa2, 0xfe, 0x91, 0x13, 0xfe, 0x79, 0x99, 0x7a,
	0x2e, 0xb0, 0xa4, 0x28, 0xb6, 0xe4, 0x63, 0x09, 0x56, 0xfd, 0xc4, 0x1d, 0xc5, 0x53, 0xa3, 0xda,
	0x22, 0xc0, 0x93, 0x17, 0xe3, 0x59, 0x07, 0x35, 0x0b, 0x0e, 0x2f, 0x2a, 0xef, 0xc0, 0xaa, 0x7f,
	0xeb, 0xbf, 0x9a, 0xf0, 0xae, 0x83, 0x9a, 0x75, 0x3c, 0x07, 0x71, 0x00, 0x35, 0xef, 0xa2, 0x11,
	0xad, 0x09, 0x33, 0x5f, 0xa0, 0x53, 0x12, 0xeb, 0xc4, 0xb0, 0x9a, 0x71, 0x1a, 0xe7, 0xd4, 0x7f,
	0x13, 0x39, 0xbb, 0xee, 0xe7, 0x6c, 0x36, 0x13, 0xc3, 0x34, 0xfe, 0x3a, 0x07, 0x4b, 0x7e, 0x22,
	0xdd, 0x7c, 0x4c, 0x1d, 0xcc, 0xf7, 0x04, 0x50, 0xd3, 0x6f, 0x0f, 0x29, 0xf3, 0xf6, 0x68, 0x00,
	0xb4, 0x6d, 0xbd, 0x6b, 0xb2, 0x31, 0xf3, 0xe8, 0xd4, 0x95, 0x69, 0x86, 0xeb, 0xb5, 0x50, 0xac,
	0x45, 0x96, 0x78, 0xd4, 0x3d, 0x72, 0x3c, 0xa5, 0x56, 0xf3, 0x09, 0x2f, 0xd5, 0x3d, 0x81, 0x37,
	0xfb, 0x10, 0x5b, 0xfa, 0xeb, 0x86, 0x4e, 0x8f, 0x79, 0x61, 0xee, 0x09, 0x50, 0x05, 0xc6, 0x1e,
	0x1a, 0x54, 0xc3, 0x94, 0xf0, 0x3a, 0x1c, 0x0c, 0xd1, 0x3a, 0x4c, 0xba, 0x1d, 0x87, 0x60, 0x7d,
	0x0f, 0x37, 0xa9, 0xed, 0xb8, 0x95, 0x22, 0xe3, 0x60, 0x5c, 0x38, 0x7c, 0x03, 0xa3, 0x5e, 0x02,
	0x45, 0xe4, 0xab, 0x94, 0x62, 0xf3, 0x4d, 0x0e, 0x96, 0x7c, 0xde, 0x8a, 0x5c, 0x9b, 0x64, 0x62,
	0xba, 0xab, 0x73, 0x23, 0xb8, 0x5a, 0x1e, 0xd1, 0xd5, 0xf9, 0x4c, 0x57, 0x17, 0x32, 0x5c, 0x5d,
	0x1c, 0xe0, 0xea, 0xb1, 0x21, 0x5d, 0x5d, 0x12, 0xbb, 0xba, 0x0a, 0x8a, 0xc8, 0x77, 0x3c, 0xcd,
	0x1e, 0xc0, 0x92, 0x9f, 0x8c, 0xc3, 0x78, 0x76, 0xf8, 0x1c, 0xaf, 0x82, 0x22, 0x3a, 0x96, 0x2b,
	0xfd, 0x2e, 0xc7, 0x2e, 0xce, 0x61, 0x62, 0xff, 0x9b, 0xa3, 0x19, 0x2b, 0xf0, 0x72, 0x66, 0x81,
	0xcf, 0x27, 0x0b, 0x7c, 0x9c, 0x09, 0x85, 0x11, 0x99, 0x50, 0x4c, 0x61, 0xc2, 0x29, 0x63, 0xc2,
	0x58, 0x8f, 0x09, 0xa7, 0x49, 0x26, 0x94, 0x06, 0x30, 0xa1, 0x2c, 0x60, 0x82, 0x6a, 0xc2, 0x76,
	0xc2, 0x97, 0xee, 0x9e, 0xed, 0xec, 0x08, 0xbd, 0xf2, 0xf2, 0x81, 0x35, 0xe0, 0xf2, 0x08, 0xda,
	0x78, 0x4c, 0xaf, 0x25, 0x0a, 0x6b, 0x35, 0x28, 0xac, 0x22, 0x06, 0x84, 0x05, 0xf5, 0x0b, 0x09,
	0x8a, 0xf7, 0x0c, 0xab, 0xa5, 0xbd, 0x21, 0xfe, 0x82, 0x70, 0x5c, 0xd7, 0xe0, 0xcd, 0x2b, 0xfb,
	0xed, 0x79, 0xd2, 0xb4, 0x1d, 0x7c, 0x78, 0x47, 0x63, 0x01, 0x97, 0xb4, 0x60, 0xf8, 0x6a, 0xbe,
	0x1c, 0xd4, 0x0d, 0xf6, 0x5c, 0x73, 0x80, 0x5d, 0xca, 0x60, 0xa6, 0x7e, 0x7b, 0x7f, 0x24, 0xc1,
	0x6c, 0x6c, 0x21, 0x77, 0x4b, 0x8c, 0xa2, 0x92, 0x80, 0xa2, 0x3d, 0x4e, 0x79, 0x66, 0x4e, 0x46,
	0x39, 0x35, 0x05, 0x39, 0xdd, 0x61, 0x66, 0x4e, 0x6a, 0x39, 0xdd, 0x41, 0x6b, 0x50, 0xec, 0x30,
	0x5f, 0x55, 0xf2, 0xcc, 0xc5, 0xe3, 0xcc, 0xc5, 0xbe, 0xfb, 0x34, 0x3e, 0xa5, 0x5e, 0x86, 0xbf,
	0x1e, 0x52, 0x87, 0xe0, 0x36, 0xef, 0x43, 0xf7, 0x1c, 0xdc, 0x26, 0x07, 0x76, 0x2b, 0xbd, 0x95,
	0x56, 0x3f, 0x93, 0x60, 0x25, 0x6d, 0x0f, 0x37, 0xe3, 0x5f, 0x30, 0xd1, 0xed, 0x98, 0x86, 0x75,
	0xc2, 0xa6, 0x5c, 0x1e, 0xe3, 0x59, 0x06, 0xe0, 0x41, 0x6f, 0xe2, 0xc0, 0x6e, 0x69, 0xb1, 0x85,
	0xe8, 0x7f, 0x30, 0xa5, 0xdb, 0xa7, 0x56, 0x64, 0xab, 0xff, 0x99, 0x39, 0xcf, 0xb6, 0xee, 0x46,
	0xa7, 0xbc, 0xcd, 0x89, 0xc5, 0x9b, 0xe7, 0x01, 0x7a, 0xe9, 0x88, 0x4a, 0x90, 0x3f, 0xb8, 0xab,
	0xdd, 0x98, 0xf9, 0x0b, 0x1a, 0x03, 0x79, 0xef, 0xf0, 0xf6, 0x8c, 0x74, 0xe5, 0x39, 0x82, 0x31,
	0x8e, 0x1a, 0x7d, 0x2e, 0x05, 0x37, 0x8e, 0x88, 0xab, 0x68, 0x83, 0xa9, 0x1c, 0xd8, 0x86, 0x2b,
	0x7f, 0x1b, 0xb8, 0x8e, 0x97, 0xb8, 0xad, 0x67, 0xdf, 0xff, 0xf4, 0x69, 0xae, 0xae, 0xae, 0xb1,
	0xe7, 0x5b, 0xfe, 0xba, 0xeb, 0x36, 0x78, 0xb1, 0x6a, 0xc6, 0x1a, 0x90, 0xff, 0x48, 0x9b, 0xe8,
	0xb9, 0xc4, 0x4a, 0xa2, 0x10, 0xdc, 0x5a, 0x76, 0x1f, 0xe2, 0x23, 0x1b, 0xaa, 0x59, 0x51, 0xb7,
	0x19, 0xac, 0x4d, 0x54, 0x1f, 0x02, 0x56, 0xe3, 0xa9, 0xa1, 0x9f, 0xa1, 0xaf, 0xa4, 0xe0, 0xfe,
	0xc8, 0x70, 0xdc, 0xc0, 0x1e, 0x97, 0x3b, 0x6e, 0x88, 0xe6, 0xf3, 0x2a, 0x43, 0xf8, 0x0f, 0x65,
	0x68, 0x84, 0x9e, 0xf7, 0xbe, 0x94, 0x82, 0xfb, 0x26, 0x03, 0xe4, 0xc0, 0x9e, 0x96, 0x83, 0x1c,
	0xa2, 0x39, 0xe5, 0x6e, 0xdc, 0x1c, 0xde, 0x8d, 0x2f, 0x24, 0x58, 0x4a, 0xed, 0x40, 0xd1, 0x85,
	0xf0, 0x61, 0x25, 0xab, 0xdf, 0x55, 0x36, 0x06, 0x2d, 0xe3, 0xf0, 0xfe, 0xce, 0xe0, 0x5d, 0x40,
	0xc3, 0x90, 0x0f, 0x9d, 0x01, 0xea, 0x6f, 0xc5, 0xd0, 0x4a, 0x84, 0xe8, 0x82, 0xd6, 0x40, 0x39,
	0x9f, 0x3a, 0xcf, 0x31, 0x6c, 0x30, 0x0c, 0x35, 0x75, 0x39, 0x8e, 0x81, 0x78, 0x6b, 0x83, 0x2f,
	0x17, 0x2f, 0x74, 0xcf, 0x24, 0x40, 0xfd, 0xfd, 0x09, 0xd7, 0x9f, 0xda, 0xf4, 0x71, 0xfd, 0x19,
	0x8d, 0x0d, 0xf7, 0x81, 0x52, 0xcb, 0xd0, 0x1f, 0xf2, 0xe7, 0x03, 0x40, 0xfd, 0xed, 0x0a, 0xc7,
	0x90, 0xda, 0x1e, 0x71, 0x0c, 0x19, 0x7d, 0x4e, 0x9d, 0x61, 0x50, 0x37, 0x07, 0x62, 0x40, 0x3f,
	0x4a, 0x70, 0x71, 0xe8, 0x7b, 0x15, 0xfd, 0x53, 0x74, 0x7f, 0x0e, 0xbc, 0xf5, 0x95, 0xeb, 0xa3,
	0x6e, 0xe3, 0x66, 0xfc, 0x9f, 0x99, 0xf1, 0x6f, 0x74, 0x7d, 0x58, 0xb6, 0xc7, 0x2d, 0x44, 0x6f,
	0x42, 0xd1, 0x27, 0x0a, 0x5a, 0x8a, 0xb0, 0x26, 0xfe, 0x48, 0xa8, 0x28, 0xa2, 0x29, 0x0e, 0xa0,
	0xc2, 0x00, 0x20, 0x75, 0x32, 0x06, 0xc0, 0x0b, 0xdc, 0x21, 0xc8, 0xfb, 0x84, 0xa2, 0x85, 0xc0,
	0xb2, 0xc4, 0xa1, 0x8b, 0x7d, 0x72, 0x7e, 0xe2, 0x32, 0x3b, 0x71, 0x1e, 0xcd, 0xc6, 0x4d, 0x7a,
	0xda, 0xc6, 0xcd, 0x33, 0xf4, 0x2e, 0x14, 0x7d, 0x62, 0x71, 0xbc, 0xa2, 0x47, 0x4d, 0x8e, 0x57,
	0xfc, 0x2a, 0xb7, 0xc2, 0x4e, 0xaf, 0x28, 0xa2, 0xd3, 0x3d, 0xd4, 0x6f, 0x43, 0xd1, 0x67, 0x0d,
	0x57, 0x20, 0x7a, 0xf4, 0xe7, 0x0a, 0xc4, 0xcf, 0xef, 0x1c, 0xfe, 0xa6, 0x10, 0xfe, 0x29, 0x4c,
	0x06, 0x4f, 0xfd, 0xec, 0x8d, 0x1f, 0xd5, 0xb8, 0x17, 0x52, 0xff, 0x2f, 0x50, 0x56, 0x33, 0x56,
	0x70, 0x95, 0xab, 0x4c, 0xe5, 0xb2, 0xba, 0x24, 0x50, 0xd9, 0x60, 0xff, 0x16, 0xa0, 0x7b, 0x90,
	0xf7, 0x6a, 0x13, 0x5a, 0x4c, 0x3e, 0x13, 0x07, 0x6a, 0x2a, 0xfd, 0x13, 0xfc, 0xf4, 0x79, 0x76,
	0xfa, 0x34, 0x8a, 0x47, 0x18, 0x1d, 0x43, 0x69, 0x9f, 0x50, 0xff, 0x65, 0x73, 0x39, 0x11, 0xcb,
	0xe8, 0x1b, 0xa0, 0x52, 0x15, 0x4f, 0xc6, 0xb1, 0x23, 0x21, 0x76, 0x97, 0x9d, 0x7e, 0x0c, 0xe3,
	0x91, 0x16, 0x0d, 0x85, 0xc4, 0x49, 0x74, 0x77, 0xdc, 0x04, 0x41, 0x37, 0x17, 0x14, 0x3c, 0xb4,
	0x22, 0x52, 0xe2, 0x35, 0x60, 0x6e, 0xc3, 0xc4, 0x2e, 0x45, 0x1f, 0x4a, 0x30, 0xed, 0x77, 0x54,
	0x61, 0x2b, 0x85, 0x54, 0x76, 0x6a, 0x66, 0x6f, 0xa6, 0xac, 0x65, 0xae, 0xe1, 0x20, 0x54, 0x06,
	0xa2, 0x8a, 0x14, 0x11, 0x88, 0x23, 0xd6, 0x37, 0x6d, 0x4b, 0x0f, 0x8b, 0xec, 0x4f, 0xe3, 0xab,
	0xbf, 0x06, 0x00, 0x00, 0xff, 0xff, 0x84, 0x58, 0xca, 0x83, 0x76, 0x1e, 0x00, 0x00,
}
