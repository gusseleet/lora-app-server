syntax = "proto3";

package api;

// for grpc-gateway
import "google/api/annotations.proto";

// GatewayNetwork is the service managing the gateway network access.
service GatewayNetwork {
    // Get gateway network list.
    rpc List(ListGatewayNetworksRequest) returns (ListGatewayNetworksResponse) {
        option(google.api.http) = {
			get: "/api/gatewaynetworks"
		};
    }

    // Get data for a particular gateway network.
    rpc Get(GatewayNetworkRequest) returns (GetGatewayNetworkResponse) {
        option(google.api.http) = {
			get: "/api/gatewaynetworks/{id}"
		};
    }

    // Create a new gateway network.
    rpc Create(CreateGatewayNetworkRequest) returns (CreateGatewayNetworkResponse) {
        option(google.api.http) = {
			post: "/api/gatewaynetworks"
			body: "*"
		};
    }

    // Update an existing gateway network.
    rpc Update(UpdateGatewayNetworkRequest) returns (GatewayNetworkEmptyResponse) {
        option(google.api.http) = {
			put: "/api/gatewaynetworks/{id}"
			body: "*"
		};
    }

    // Delete a gateway network.
    rpc Delete(GatewayNetworkRequest) returns (GatewayNetworkEmptyResponse) {
        option(google.api.http) = {
			delete: "/api/gatewaynetworks/{id}"
		};
    }

    // Get gateway networks's gateway list.
    rpc ListGateways(ListGatewayNetworkGatewaysRequest) returns (ListGatewayNetworkGatewaysResponse) {
        option(google.api.http) = {
			get: "/api/gatewaynetworks/{id}/gateways"
		};
    }

    // Get data for a particular gateway network gateway.
    rpc GetGateway(GetGatewayNetworkGatewayRequest) returns (GetGatewayNetworkGatewayResponse) {
        option(google.api.http) = {
			get: "/api/gatewaynetworks/{id}/gateways/{gatewayMAC}"
		};
    }

    // Add a new gateway to a gateway network
    rpc AddGateway(GatewayNetworkGatewayRequest) returns (GatewayNetworkEmptyResponse) {
        option(google.api.http) = {
            post: "/api/gatewaynetworks/{id}/gateways"
            body: "*"
        };
    }

    // Delete a gateway from a gateway network.
    rpc DeleteGateway(DeleteGatewayNetworkGatewayRequest) returns (GatewayNetworkEmptyResponse) {
        option(google.api.http) = {
			delete: "/api/gatewaynetworks/{id}/gateways/{gatewayMAC}"
		};
    }

    // Get organization's list of gateway networks.
    rpc ListOrganizationGatewayNetworks(ListGatewayNetworkOrganizationGatewayNetworksRequest) returns (ListGatewayNetworkOrganizationGatewayNetworksResponse) {
        option(google.api.http) = {
			get: "/api/gatewaynetworks/organizations/{organizationID}"
		};
    }

    // Get gateway networks's organization list.
    rpc ListOrganization(ListGatewayNetworkOrganizationsRequest) returns (ListGatewayNetworkOrganizationsResponse) {
        option(google.api.http) = {
			get: "/api/gatewaynetworks/{id}/organizations"
		};
    }

    // Get data for a particular gateway network organization.
    rpc GetOrganization(GetGatewayNetworkOrganizationRequest) returns (GetGatewayNetworkOrganizationResponse) {
        option(google.api.http) = {
			get: "/api/gatewaynetworks/{id}/organizations/{organizationID}"
		};
    }

    // Add a new organization to a gateway network
    rpc AddOrganization(GatewayNetworkOrganizationRequest) returns (GatewayNetworkEmptyResponse) {
        option(google.api.http) = {
            post: "/api/gatewaynetworks/{id}/organizations"
            body: "*"
        };
    }

    // Delete an organization from a gateway network.
    rpc DeleteOrganization(DeleteGatewayNetworkOrganizationRequest) returns (GatewayNetworkEmptyResponse) {
        option(google.api.http) = {
			delete: "/api/gatewaynetworks/{id}/organizations/{organizationID}"
		};
    }

}

// Request the gateway networks defined in the system.
message ListGatewayNetworksRequest {
    // Max number of gateway networks to return in the result-set.
    int32 limit = 1;

    // Offset in the result-set (for pagination).
    int32 offset = 2;

    // When provided, the given string will be used to search on
    // Name.
    string search = 3;

    // Filter private or public networks. 0 = all, 1 = only public, 2 = only private
    int64 privateNetwork = 4;

    // Optional organization id for filtering
    int64 organizationID = 5;
}

// Request the gateway network information.
message GatewayNetworkRequest {
    int64 id = 1;
}

message GetGatewayNetworkResponse {
    // ID of the Gateway Network.
    int64 id = 1;

    // When the gateway network was created.
    string createdAt = 2;

    // When the gateway network was last updated.
    string updatedAt = 3;

    // Gateway Network name.
    string name = 4;

    // Description of the gateway network.
    string description = 5;

    // Is the network private or not.
    bool privateNetwork = 6;

    // Organization the gateway network belongs to.
    int64 organizationID = 7;

}

// Add a new organization.
message CreateGatewayNetworkRequest {
    // Gateway network name.
    string name = 1;

    // Price of the gateway network.
    int64 price = 2;

    // Description of the gateway network.
    string description = 3;

    // Is the network private or not.
    bool privateNetwork = 4;

    // Organization the gateway network belongs to.
    int64 organizationID = 5;

    // List of gateways to add
    repeated Gateways gateways = 6;
}

message Gateways {
    // Hex encoded mac address.
    string gatewayMAC = 1;
}

message CreateGatewayNetworkResponse {
    // ID of the gateway network.
    int64 id = 1;
}

// Update existing gateway network.
message UpdateGatewayNetworkRequest {
    // The ID of the gateway network to be updated.
    int64 id = 1;

    // The new name.
    string name = 2;

    // New description of the gateway network.
    string description = 3;

    // Is the network private or not.
    bool privateNetwork = 4;

    // Organization the gateway network belongs to.
    int64 organizationID = 5;
}

message ListGatewayNetworksResponse {
    int32 totalCount = 1;
    repeated GetGatewayNetworkResponse result = 2;
}

message GatewayNetworkEmptyResponse {
    // Nothing to return on update, delete.
}

message GatewayNetworkGatewayRequest {
    // The gateway network id.
    int64 id = 1;

    // Hex encoded gateway MAC.
    string gatewayMAC = 2;
}

message DeleteGatewayNetworkGatewayRequest {
    // The gateway network id.
    int64 id = 1;

    // Hex encoded gateway MAC.
    string gatewayMAC = 2;
}

// Request the gateways in a gateway network.
message ListGatewayNetworkGatewaysRequest {
    // The gateway network id.
    int64 id = 1;

    // Max number of gateways to return in the result-set.
    int32 limit = 2;

    // Offset in the result-set (for pagination).
    int32 offset = 3;
}

message GetGatewayNetworkGatewayRequest {
    // ID of the gateway network.
    int64 id = 1;

    // Hex encoded MAC of the gateway.
    string gatewayMAC = 2;
}

// Response for a gateway in the gateway network
message GetGatewayNetworkGatewayResponse {
    // Hex encoded mac of the gateway.
    string mac = 1;

    // Name of the gateway.
    string name = 2;

    // When the gateway was created.
    string createdAt = 3;

    // When the gateway was last updated.
    string updatedAt = 4;
}

// Response for the gateways in a gateway network.
message ListGatewayNetworkGatewaysResponse {
    // The total number of gateways in the gateway network.
    int32 totalCount = 1;

    // The gateways in the requested limit, offset range.
    repeated GetGatewayNetworkGatewayResponse result = 2;
}

message GatewayNetworkOrganizationRequest {
    // The gateway network id.
    int64 id = 1;

    // The id of the organization.
    int64 organizationID = 2;
}

message DeleteGatewayNetworkOrganizationRequest {
    // The gateway network id.
    int64 id = 1;

    // The id of the organization.
    int64 organizationID = 2;
}

// Request gateway networks registered to an organization.
message ListGatewayNetworkOrganizationGatewayNetworksRequest {
    // The organization id.
    int64 organizationID = 1;

    // Max number of users to return in the result-set.
    int32 limit = 2;

    // Offset in the result-set (for pagination).
    int32 offset = 3;
}

// Request the organizations registered to a gateway network.
message ListGatewayNetworkOrganizationsRequest {
    // The gateway network id.
    int64 id = 1;

    // Max number of users to return in the result-set.
    int32 limit = 2;

    // Offset in the result-set (for pagination).
    int32 offset = 3;
}

message GetGatewayNetworkOrganizationRequest {
    // ID of the gateway network.
    int64 id = 1;

    // The id of the organization.
    int64 organizationID = 2;
}

// Response for a the gateway network registered to an organization
message GetGatewayNetworkOrganizationGatewayNetworkResponse {
    // Id of the gateway network.
    int64 Id = 1;

    // Name of the gateway network.
    string name = 2;

    // When the user was created.
    string createdAt = 3;

    // When the gateway was last updated.
    string updatedAt = 4;
}

// Response for an organization in the gateway network
message GetGatewayNetworkOrganizationResponse {
    // Id of the organization.
    int64 organizationId = 1;

    // Display name of the organization.
    string displayName = 2;

    // When the user was created.
    string createdAt = 3;

    // When the gateway was last updated.
    string updatedAt = 4;
}

// Response for the gateway networks registered to the organization.
message ListGatewayNetworkOrganizationGatewayNetworksResponse {
    // The total number of gateway netoworks registered to the organization.
    int32 totalCount = 1;

    // The gateway networks in the requested limit, offset range.
    repeated GetGatewayNetworkOrganizationGatewayNetworkResponse result = 2;
}

// Response for the organizations in a gateway network.
message ListGatewayNetworkOrganizationsResponse {
    // The total number of organizations in the gateway network.
    int32 totalCount = 1;

    // The organizations in the requested limit, offset range.
    repeated GetGatewayNetworkOrganizationResponse result = 2;
}