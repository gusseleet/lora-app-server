// Code generated by protoc-gen-go. DO NOT EDIT.
// source: gatewayNetwork.proto

package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Request the gateway networks defined in the system.
type ListGatewayNetworksRequest struct {
	// Max number of gateway networks to return in the result-set.
	Limit int32 `protobuf:"varint,1,opt,name=limit" json:"limit,omitempty"`
	// Offset in the result-set (for pagination).
	Offset int32 `protobuf:"varint,2,opt,name=offset" json:"offset,omitempty"`
	// When provided, the given string will be used to search on
	// Name.
	Search string `protobuf:"bytes,3,opt,name=search" json:"search,omitempty"`
	// Filter private or public networks. 0 = all, 1 = only public, 2 = only private
	PrivateNetwork int64 `protobuf:"varint,4,opt,name=privateNetwork" json:"privateNetwork,omitempty"`
	// Optional organization id for filtering
	OrganizationID int64 `protobuf:"varint,5,opt,name=organizationID" json:"organizationID,omitempty"`
}

func (m *ListGatewayNetworksRequest) Reset()                    { *m = ListGatewayNetworksRequest{} }
func (m *ListGatewayNetworksRequest) String() string            { return proto.CompactTextString(m) }
func (*ListGatewayNetworksRequest) ProtoMessage()               {}
func (*ListGatewayNetworksRequest) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{0} }

func (m *ListGatewayNetworksRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListGatewayNetworksRequest) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *ListGatewayNetworksRequest) GetSearch() string {
	if m != nil {
		return m.Search
	}
	return ""
}

func (m *ListGatewayNetworksRequest) GetPrivateNetwork() int64 {
	if m != nil {
		return m.PrivateNetwork
	}
	return 0
}

func (m *ListGatewayNetworksRequest) GetOrganizationID() int64 {
	if m != nil {
		return m.OrganizationID
	}
	return 0
}

// Request the gateway network information.
type GatewayNetworkRequest struct {
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *GatewayNetworkRequest) Reset()                    { *m = GatewayNetworkRequest{} }
func (m *GatewayNetworkRequest) String() string            { return proto.CompactTextString(m) }
func (*GatewayNetworkRequest) ProtoMessage()               {}
func (*GatewayNetworkRequest) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{1} }

func (m *GatewayNetworkRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type GetGatewayNetworkResponse struct {
	// ID of the Gateway Network.
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// When the gateway network was created.
	CreatedAt string `protobuf:"bytes,2,opt,name=createdAt" json:"createdAt,omitempty"`
	// When the gateway network was last updated.
	UpdatedAt string `protobuf:"bytes,3,opt,name=updatedAt" json:"updatedAt,omitempty"`
	// Gateway Network name.
	Name string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	// Description of the gateway network.
	Description string `protobuf:"bytes,5,opt,name=description" json:"description,omitempty"`
	// Is the network private or not.
	PrivateNetwork bool `protobuf:"varint,6,opt,name=privateNetwork" json:"privateNetwork,omitempty"`
	// Organization the gateway network belongs to.
	OrganizationID int64 `protobuf:"varint,7,opt,name=organizationID" json:"organizationID,omitempty"`
}

func (m *GetGatewayNetworkResponse) Reset()                    { *m = GetGatewayNetworkResponse{} }
func (m *GetGatewayNetworkResponse) String() string            { return proto.CompactTextString(m) }
func (*GetGatewayNetworkResponse) ProtoMessage()               {}
func (*GetGatewayNetworkResponse) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{2} }

func (m *GetGatewayNetworkResponse) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GetGatewayNetworkResponse) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *GetGatewayNetworkResponse) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

func (m *GetGatewayNetworkResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetGatewayNetworkResponse) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *GetGatewayNetworkResponse) GetPrivateNetwork() bool {
	if m != nil {
		return m.PrivateNetwork
	}
	return false
}

func (m *GetGatewayNetworkResponse) GetOrganizationID() int64 {
	if m != nil {
		return m.OrganizationID
	}
	return 0
}

// Add a new organization.
type CreateGatewayNetworkRequest struct {
	// Gateway network name.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Description of the gateway network.
	Description string `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	// Is the network private or not.
	PrivateNetwork bool `protobuf:"varint,3,opt,name=privateNetwork" json:"privateNetwork,omitempty"`
	// Organization the gateway network belongs to.
	OrganizationID int64 `protobuf:"varint,4,opt,name=organizationID" json:"organizationID,omitempty"`
	// List of gateways to add
	Gateways []*Gateways `protobuf:"bytes,5,rep,name=gateways" json:"gateways,omitempty"`
	// List of payment plans to add
	PaymentPlans []*PaymentPlans `protobuf:"bytes,6,rep,name=paymentPlans" json:"paymentPlans,omitempty"`
}

func (m *CreateGatewayNetworkRequest) Reset()                    { *m = CreateGatewayNetworkRequest{} }
func (m *CreateGatewayNetworkRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateGatewayNetworkRequest) ProtoMessage()               {}
func (*CreateGatewayNetworkRequest) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{3} }

func (m *CreateGatewayNetworkRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateGatewayNetworkRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *CreateGatewayNetworkRequest) GetPrivateNetwork() bool {
	if m != nil {
		return m.PrivateNetwork
	}
	return false
}

func (m *CreateGatewayNetworkRequest) GetOrganizationID() int64 {
	if m != nil {
		return m.OrganizationID
	}
	return 0
}

func (m *CreateGatewayNetworkRequest) GetGateways() []*Gateways {
	if m != nil {
		return m.Gateways
	}
	return nil
}

func (m *CreateGatewayNetworkRequest) GetPaymentPlans() []*PaymentPlans {
	if m != nil {
		return m.PaymentPlans
	}
	return nil
}

type Gateways struct {
	// Hex encoded mac address.
	GatewayMAC string `protobuf:"bytes,1,opt,name=gatewayMAC" json:"gatewayMAC,omitempty"`
}

func (m *Gateways) Reset()                    { *m = Gateways{} }
func (m *Gateways) String() string            { return proto.CompactTextString(m) }
func (*Gateways) ProtoMessage()               {}
func (*Gateways) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{4} }

func (m *Gateways) GetGatewayMAC() string {
	if m != nil {
		return m.GatewayMAC
	}
	return ""
}

type PaymentPlans struct {
	// ID of payment plan
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *PaymentPlans) Reset()                    { *m = PaymentPlans{} }
func (m *PaymentPlans) String() string            { return proto.CompactTextString(m) }
func (*PaymentPlans) ProtoMessage()               {}
func (*PaymentPlans) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{5} }

func (m *PaymentPlans) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type CreateGatewayNetworkResponse struct {
	// ID of the gateway network.
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *CreateGatewayNetworkResponse) Reset()                    { *m = CreateGatewayNetworkResponse{} }
func (m *CreateGatewayNetworkResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateGatewayNetworkResponse) ProtoMessage()               {}
func (*CreateGatewayNetworkResponse) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{6} }

func (m *CreateGatewayNetworkResponse) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

// Update existing gateway network.
type UpdateGatewayNetworkRequest struct {
	// The ID of the gateway network to be updated.
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// The new name.
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// New description of the gateway network.
	Description string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	// Is the network private or not.
	PrivateNetwork bool `protobuf:"varint,4,opt,name=privateNetwork" json:"privateNetwork,omitempty"`
	// Organization the gateway network belongs to.
	OrganizationID int64 `protobuf:"varint,5,opt,name=organizationID" json:"organizationID,omitempty"`
}

func (m *UpdateGatewayNetworkRequest) Reset()                    { *m = UpdateGatewayNetworkRequest{} }
func (m *UpdateGatewayNetworkRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateGatewayNetworkRequest) ProtoMessage()               {}
func (*UpdateGatewayNetworkRequest) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{7} }

func (m *UpdateGatewayNetworkRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UpdateGatewayNetworkRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateGatewayNetworkRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *UpdateGatewayNetworkRequest) GetPrivateNetwork() bool {
	if m != nil {
		return m.PrivateNetwork
	}
	return false
}

func (m *UpdateGatewayNetworkRequest) GetOrganizationID() int64 {
	if m != nil {
		return m.OrganizationID
	}
	return 0
}

type ListGatewayNetworksResponse struct {
	TotalCount int32                        `protobuf:"varint,1,opt,name=totalCount" json:"totalCount,omitempty"`
	Result     []*GetGatewayNetworkResponse `protobuf:"bytes,2,rep,name=result" json:"result,omitempty"`
}

func (m *ListGatewayNetworksResponse) Reset()                    { *m = ListGatewayNetworksResponse{} }
func (m *ListGatewayNetworksResponse) String() string            { return proto.CompactTextString(m) }
func (*ListGatewayNetworksResponse) ProtoMessage()               {}
func (*ListGatewayNetworksResponse) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{8} }

func (m *ListGatewayNetworksResponse) GetTotalCount() int32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *ListGatewayNetworksResponse) GetResult() []*GetGatewayNetworkResponse {
	if m != nil {
		return m.Result
	}
	return nil
}

type GatewayNetworkEmptyResponse struct {
}

func (m *GatewayNetworkEmptyResponse) Reset()                    { *m = GatewayNetworkEmptyResponse{} }
func (m *GatewayNetworkEmptyResponse) String() string            { return proto.CompactTextString(m) }
func (*GatewayNetworkEmptyResponse) ProtoMessage()               {}
func (*GatewayNetworkEmptyResponse) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{9} }

type GatewayNetworkGatewayRequest struct {
	// The gateway network id.
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// Hex encoded gateway MAC.
	GatewayMAC string `protobuf:"bytes,2,opt,name=gatewayMAC" json:"gatewayMAC,omitempty"`
}

func (m *GatewayNetworkGatewayRequest) Reset()                    { *m = GatewayNetworkGatewayRequest{} }
func (m *GatewayNetworkGatewayRequest) String() string            { return proto.CompactTextString(m) }
func (*GatewayNetworkGatewayRequest) ProtoMessage()               {}
func (*GatewayNetworkGatewayRequest) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{10} }

func (m *GatewayNetworkGatewayRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GatewayNetworkGatewayRequest) GetGatewayMAC() string {
	if m != nil {
		return m.GatewayMAC
	}
	return ""
}

type DeleteGatewayNetworkGatewayRequest struct {
	// The gateway network id.
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// Hex encoded gateway MAC.
	GatewayMAC string `protobuf:"bytes,2,opt,name=gatewayMAC" json:"gatewayMAC,omitempty"`
}

func (m *DeleteGatewayNetworkGatewayRequest) Reset()         { *m = DeleteGatewayNetworkGatewayRequest{} }
func (m *DeleteGatewayNetworkGatewayRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteGatewayNetworkGatewayRequest) ProtoMessage()    {}
func (*DeleteGatewayNetworkGatewayRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor6, []int{11}
}

func (m *DeleteGatewayNetworkGatewayRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DeleteGatewayNetworkGatewayRequest) GetGatewayMAC() string {
	if m != nil {
		return m.GatewayMAC
	}
	return ""
}

// Request the gateways in a gateway network.
type ListGatewayNetworkGatewaysRequest struct {
	// The gateway network id.
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// Max number of gateways to return in the result-set.
	Limit int32 `protobuf:"varint,2,opt,name=limit" json:"limit,omitempty"`
	// Offset in the result-set (for pagination).
	Offset int32 `protobuf:"varint,3,opt,name=offset" json:"offset,omitempty"`
}

func (m *ListGatewayNetworkGatewaysRequest) Reset()         { *m = ListGatewayNetworkGatewaysRequest{} }
func (m *ListGatewayNetworkGatewaysRequest) String() string { return proto.CompactTextString(m) }
func (*ListGatewayNetworkGatewaysRequest) ProtoMessage()    {}
func (*ListGatewayNetworkGatewaysRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor6, []int{12}
}

func (m *ListGatewayNetworkGatewaysRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ListGatewayNetworkGatewaysRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListGatewayNetworkGatewaysRequest) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type GetGatewayNetworkGatewayRequest struct {
	// ID of the gateway network.
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// Hex encoded MAC of the gateway.
	GatewayMAC string `protobuf:"bytes,2,opt,name=gatewayMAC" json:"gatewayMAC,omitempty"`
}

func (m *GetGatewayNetworkGatewayRequest) Reset()         { *m = GetGatewayNetworkGatewayRequest{} }
func (m *GetGatewayNetworkGatewayRequest) String() string { return proto.CompactTextString(m) }
func (*GetGatewayNetworkGatewayRequest) ProtoMessage()    {}
func (*GetGatewayNetworkGatewayRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor6, []int{13}
}

func (m *GetGatewayNetworkGatewayRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GetGatewayNetworkGatewayRequest) GetGatewayMAC() string {
	if m != nil {
		return m.GatewayMAC
	}
	return ""
}

// Response for a gateway in the gateway network
type GetGatewayNetworkGatewayResponse struct {
	// Hex encoded mac of the gateway.
	Mac string `protobuf:"bytes,1,opt,name=mac" json:"mac,omitempty"`
	// Name of the gateway.
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// When the gateway was created.
	CreatedAt string `protobuf:"bytes,3,opt,name=createdAt" json:"createdAt,omitempty"`
	// When the gateway was last updated.
	UpdatedAt string `protobuf:"bytes,4,opt,name=updatedAt" json:"updatedAt,omitempty"`
}

func (m *GetGatewayNetworkGatewayResponse) Reset()         { *m = GetGatewayNetworkGatewayResponse{} }
func (m *GetGatewayNetworkGatewayResponse) String() string { return proto.CompactTextString(m) }
func (*GetGatewayNetworkGatewayResponse) ProtoMessage()    {}
func (*GetGatewayNetworkGatewayResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor6, []int{14}
}

func (m *GetGatewayNetworkGatewayResponse) GetMac() string {
	if m != nil {
		return m.Mac
	}
	return ""
}

func (m *GetGatewayNetworkGatewayResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetGatewayNetworkGatewayResponse) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *GetGatewayNetworkGatewayResponse) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

// Response for the gateways in a gateway network.
type ListGatewayNetworkGatewaysResponse struct {
	// The total number of gateways in the gateway network.
	TotalCount int32 `protobuf:"varint,1,opt,name=totalCount" json:"totalCount,omitempty"`
	// The gateways in the requested limit, offset range.
	Result []*GetGatewayNetworkGatewayResponse `protobuf:"bytes,2,rep,name=result" json:"result,omitempty"`
}

func (m *ListGatewayNetworkGatewaysResponse) Reset()         { *m = ListGatewayNetworkGatewaysResponse{} }
func (m *ListGatewayNetworkGatewaysResponse) String() string { return proto.CompactTextString(m) }
func (*ListGatewayNetworkGatewaysResponse) ProtoMessage()    {}
func (*ListGatewayNetworkGatewaysResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor6, []int{15}
}

func (m *ListGatewayNetworkGatewaysResponse) GetTotalCount() int32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *ListGatewayNetworkGatewaysResponse) GetResult() []*GetGatewayNetworkGatewayResponse {
	if m != nil {
		return m.Result
	}
	return nil
}

type GatewayNetworkOrganizationRequest struct {
	// The gateway network id.
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// The id of the organization.
	OrganizationID int64 `protobuf:"varint,2,opt,name=organizationID" json:"organizationID,omitempty"`
}

func (m *GatewayNetworkOrganizationRequest) Reset()         { *m = GatewayNetworkOrganizationRequest{} }
func (m *GatewayNetworkOrganizationRequest) String() string { return proto.CompactTextString(m) }
func (*GatewayNetworkOrganizationRequest) ProtoMessage()    {}
func (*GatewayNetworkOrganizationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor6, []int{16}
}

func (m *GatewayNetworkOrganizationRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GatewayNetworkOrganizationRequest) GetOrganizationID() int64 {
	if m != nil {
		return m.OrganizationID
	}
	return 0
}

type DeleteGatewayNetworkOrganizationRequest struct {
	// The gateway network id.
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// The id of the organization.
	OrganizationID int64 `protobuf:"varint,2,opt,name=organizationID" json:"organizationID,omitempty"`
}

func (m *DeleteGatewayNetworkOrganizationRequest) Reset() {
	*m = DeleteGatewayNetworkOrganizationRequest{}
}
func (m *DeleteGatewayNetworkOrganizationRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteGatewayNetworkOrganizationRequest) ProtoMessage()    {}
func (*DeleteGatewayNetworkOrganizationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor6, []int{17}
}

func (m *DeleteGatewayNetworkOrganizationRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DeleteGatewayNetworkOrganizationRequest) GetOrganizationID() int64 {
	if m != nil {
		return m.OrganizationID
	}
	return 0
}

// Request gateway networks registered to an organization.
type ListGatewayNetworkOrganizationGatewayNetworksRequest struct {
	// The organization id.
	OrganizationID int64 `protobuf:"varint,1,opt,name=organizationID" json:"organizationID,omitempty"`
	// Max number of users to return in the result-set.
	Limit int32 `protobuf:"varint,2,opt,name=limit" json:"limit,omitempty"`
	// Offset in the result-set (for pagination).
	Offset int32 `protobuf:"varint,3,opt,name=offset" json:"offset,omitempty"`
}

func (m *ListGatewayNetworkOrganizationGatewayNetworksRequest) Reset() {
	*m = ListGatewayNetworkOrganizationGatewayNetworksRequest{}
}
func (m *ListGatewayNetworkOrganizationGatewayNetworksRequest) String() string {
	return proto.CompactTextString(m)
}
func (*ListGatewayNetworkOrganizationGatewayNetworksRequest) ProtoMessage() {}
func (*ListGatewayNetworkOrganizationGatewayNetworksRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor6, []int{18}
}

func (m *ListGatewayNetworkOrganizationGatewayNetworksRequest) GetOrganizationID() int64 {
	if m != nil {
		return m.OrganizationID
	}
	return 0
}

func (m *ListGatewayNetworkOrganizationGatewayNetworksRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListGatewayNetworkOrganizationGatewayNetworksRequest) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

// Request the organizations registered to a gateway network.
type ListGatewayNetworkOrganizationsRequest struct {
	// The gateway network id.
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// Max number of users to return in the result-set.
	Limit int32 `protobuf:"varint,2,opt,name=limit" json:"limit,omitempty"`
	// Offset in the result-set (for pagination).
	Offset int32 `protobuf:"varint,3,opt,name=offset" json:"offset,omitempty"`
}

func (m *ListGatewayNetworkOrganizationsRequest) Reset() {
	*m = ListGatewayNetworkOrganizationsRequest{}
}
func (m *ListGatewayNetworkOrganizationsRequest) String() string { return proto.CompactTextString(m) }
func (*ListGatewayNetworkOrganizationsRequest) ProtoMessage()    {}
func (*ListGatewayNetworkOrganizationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor6, []int{19}
}

func (m *ListGatewayNetworkOrganizationsRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ListGatewayNetworkOrganizationsRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListGatewayNetworkOrganizationsRequest) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type GetGatewayNetworkOrganizationRequest struct {
	// ID of the gateway network.
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// The id of the organization.
	OrganizationID int64 `protobuf:"varint,2,opt,name=organizationID" json:"organizationID,omitempty"`
}

func (m *GetGatewayNetworkOrganizationRequest) Reset()         { *m = GetGatewayNetworkOrganizationRequest{} }
func (m *GetGatewayNetworkOrganizationRequest) String() string { return proto.CompactTextString(m) }
func (*GetGatewayNetworkOrganizationRequest) ProtoMessage()    {}
func (*GetGatewayNetworkOrganizationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor6, []int{20}
}

func (m *GetGatewayNetworkOrganizationRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GetGatewayNetworkOrganizationRequest) GetOrganizationID() int64 {
	if m != nil {
		return m.OrganizationID
	}
	return 0
}

// Response for a the gateway network registered to an organization
type GetGatewayNetworkOrganizationGatewayNetworkResponse struct {
	// Id of the gateway network.
	Id int64 `protobuf:"varint,1,opt,name=Id" json:"Id,omitempty"`
	// Name of the gateway network.
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// When the user was created.
	CreatedAt string `protobuf:"bytes,3,opt,name=createdAt" json:"createdAt,omitempty"`
	// When the gateway was last updated.
	UpdatedAt string `protobuf:"bytes,4,opt,name=updatedAt" json:"updatedAt,omitempty"`
}

func (m *GetGatewayNetworkOrganizationGatewayNetworkResponse) Reset() {
	*m = GetGatewayNetworkOrganizationGatewayNetworkResponse{}
}
func (m *GetGatewayNetworkOrganizationGatewayNetworkResponse) String() string {
	return proto.CompactTextString(m)
}
func (*GetGatewayNetworkOrganizationGatewayNetworkResponse) ProtoMessage() {}
func (*GetGatewayNetworkOrganizationGatewayNetworkResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor6, []int{21}
}

func (m *GetGatewayNetworkOrganizationGatewayNetworkResponse) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GetGatewayNetworkOrganizationGatewayNetworkResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetGatewayNetworkOrganizationGatewayNetworkResponse) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *GetGatewayNetworkOrganizationGatewayNetworkResponse) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

// Response for an organization in the gateway network
type GetGatewayNetworkOrganizationResponse struct {
	// Id of the organization.
	OrganizationId int64 `protobuf:"varint,1,opt,name=organizationId" json:"organizationId,omitempty"`
	// Display name of the organization.
	DisplayName string `protobuf:"bytes,2,opt,name=displayName" json:"displayName,omitempty"`
	// When the user was created.
	CreatedAt string `protobuf:"bytes,3,opt,name=createdAt" json:"createdAt,omitempty"`
	// When the gateway was last updated.
	UpdatedAt string `protobuf:"bytes,4,opt,name=updatedAt" json:"updatedAt,omitempty"`
}

func (m *GetGatewayNetworkOrganizationResponse) Reset()         { *m = GetGatewayNetworkOrganizationResponse{} }
func (m *GetGatewayNetworkOrganizationResponse) String() string { return proto.CompactTextString(m) }
func (*GetGatewayNetworkOrganizationResponse) ProtoMessage()    {}
func (*GetGatewayNetworkOrganizationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor6, []int{22}
}

func (m *GetGatewayNetworkOrganizationResponse) GetOrganizationId() int64 {
	if m != nil {
		return m.OrganizationId
	}
	return 0
}

func (m *GetGatewayNetworkOrganizationResponse) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *GetGatewayNetworkOrganizationResponse) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *GetGatewayNetworkOrganizationResponse) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

// Response for the gateway networks registered to the organization.
type ListGatewayNetworkOrganizationGatewayNetworksResponse struct {
	// The total number of gateway netoworks registered to the organization.
	TotalCount int32 `protobuf:"varint,1,opt,name=totalCount" json:"totalCount,omitempty"`
	// The gateway networks in the requested limit, offset range.
	Result []*GetGatewayNetworkOrganizationGatewayNetworkResponse `protobuf:"bytes,2,rep,name=result" json:"result,omitempty"`
}

func (m *ListGatewayNetworkOrganizationGatewayNetworksResponse) Reset() {
	*m = ListGatewayNetworkOrganizationGatewayNetworksResponse{}
}
func (m *ListGatewayNetworkOrganizationGatewayNetworksResponse) String() string {
	return proto.CompactTextString(m)
}
func (*ListGatewayNetworkOrganizationGatewayNetworksResponse) ProtoMessage() {}
func (*ListGatewayNetworkOrganizationGatewayNetworksResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor6, []int{23}
}

func (m *ListGatewayNetworkOrganizationGatewayNetworksResponse) GetTotalCount() int32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *ListGatewayNetworkOrganizationGatewayNetworksResponse) GetResult() []*GetGatewayNetworkOrganizationGatewayNetworkResponse {
	if m != nil {
		return m.Result
	}
	return nil
}

// Response for the organizations in a gateway network.
type ListGatewayNetworkOrganizationsResponse struct {
	// The total number of organizations in the gateway network.
	TotalCount int32 `protobuf:"varint,1,opt,name=totalCount" json:"totalCount,omitempty"`
	// The organizations in the requested limit, offset range.
	Result []*GetGatewayNetworkOrganizationResponse `protobuf:"bytes,2,rep,name=result" json:"result,omitempty"`
}

func (m *ListGatewayNetworkOrganizationsResponse) Reset() {
	*m = ListGatewayNetworkOrganizationsResponse{}
}
func (m *ListGatewayNetworkOrganizationsResponse) String() string { return proto.CompactTextString(m) }
func (*ListGatewayNetworkOrganizationsResponse) ProtoMessage()    {}
func (*ListGatewayNetworkOrganizationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor6, []int{24}
}

func (m *ListGatewayNetworkOrganizationsResponse) GetTotalCount() int32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *ListGatewayNetworkOrganizationsResponse) GetResult() []*GetGatewayNetworkOrganizationResponse {
	if m != nil {
		return m.Result
	}
	return nil
}

func init() {
	proto.RegisterType((*ListGatewayNetworksRequest)(nil), "api.ListGatewayNetworksRequest")
	proto.RegisterType((*GatewayNetworkRequest)(nil), "api.GatewayNetworkRequest")
	proto.RegisterType((*GetGatewayNetworkResponse)(nil), "api.GetGatewayNetworkResponse")
	proto.RegisterType((*CreateGatewayNetworkRequest)(nil), "api.CreateGatewayNetworkRequest")
	proto.RegisterType((*Gateways)(nil), "api.Gateways")
	proto.RegisterType((*PaymentPlans)(nil), "api.PaymentPlans")
	proto.RegisterType((*CreateGatewayNetworkResponse)(nil), "api.CreateGatewayNetworkResponse")
	proto.RegisterType((*UpdateGatewayNetworkRequest)(nil), "api.UpdateGatewayNetworkRequest")
	proto.RegisterType((*ListGatewayNetworksResponse)(nil), "api.ListGatewayNetworksResponse")
	proto.RegisterType((*GatewayNetworkEmptyResponse)(nil), "api.GatewayNetworkEmptyResponse")
	proto.RegisterType((*GatewayNetworkGatewayRequest)(nil), "api.GatewayNetworkGatewayRequest")
	proto.RegisterType((*DeleteGatewayNetworkGatewayRequest)(nil), "api.DeleteGatewayNetworkGatewayRequest")
	proto.RegisterType((*ListGatewayNetworkGatewaysRequest)(nil), "api.ListGatewayNetworkGatewaysRequest")
	proto.RegisterType((*GetGatewayNetworkGatewayRequest)(nil), "api.GetGatewayNetworkGatewayRequest")
	proto.RegisterType((*GetGatewayNetworkGatewayResponse)(nil), "api.GetGatewayNetworkGatewayResponse")
	proto.RegisterType((*ListGatewayNetworkGatewaysResponse)(nil), "api.ListGatewayNetworkGatewaysResponse")
	proto.RegisterType((*GatewayNetworkOrganizationRequest)(nil), "api.GatewayNetworkOrganizationRequest")
	proto.RegisterType((*DeleteGatewayNetworkOrganizationRequest)(nil), "api.DeleteGatewayNetworkOrganizationRequest")
	proto.RegisterType((*ListGatewayNetworkOrganizationGatewayNetworksRequest)(nil), "api.ListGatewayNetworkOrganizationGatewayNetworksRequest")
	proto.RegisterType((*ListGatewayNetworkOrganizationsRequest)(nil), "api.ListGatewayNetworkOrganizationsRequest")
	proto.RegisterType((*GetGatewayNetworkOrganizationRequest)(nil), "api.GetGatewayNetworkOrganizationRequest")
	proto.RegisterType((*GetGatewayNetworkOrganizationGatewayNetworkResponse)(nil), "api.GetGatewayNetworkOrganizationGatewayNetworkResponse")
	proto.RegisterType((*GetGatewayNetworkOrganizationResponse)(nil), "api.GetGatewayNetworkOrganizationResponse")
	proto.RegisterType((*ListGatewayNetworkOrganizationGatewayNetworksResponse)(nil), "api.ListGatewayNetworkOrganizationGatewayNetworksResponse")
	proto.RegisterType((*ListGatewayNetworkOrganizationsResponse)(nil), "api.ListGatewayNetworkOrganizationsResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for GatewayNetwork service

type GatewayNetworkClient interface {
	// Get gateway network list.
	List(ctx context.Context, in *ListGatewayNetworksRequest, opts ...grpc.CallOption) (*ListGatewayNetworksResponse, error)
	// Get data for a particular gateway network.
	Get(ctx context.Context, in *GatewayNetworkRequest, opts ...grpc.CallOption) (*GetGatewayNetworkResponse, error)
	// Create a new gateway network.
	Create(ctx context.Context, in *CreateGatewayNetworkRequest, opts ...grpc.CallOption) (*CreateGatewayNetworkResponse, error)
	// Update an existing gateway network.
	Update(ctx context.Context, in *UpdateGatewayNetworkRequest, opts ...grpc.CallOption) (*GatewayNetworkEmptyResponse, error)
	// Delete a gateway network.
	Delete(ctx context.Context, in *GatewayNetworkRequest, opts ...grpc.CallOption) (*GatewayNetworkEmptyResponse, error)
	// Get gateway networks's gateway list.
	ListGateways(ctx context.Context, in *ListGatewayNetworkGatewaysRequest, opts ...grpc.CallOption) (*ListGatewayNetworkGatewaysResponse, error)
	// Get data for a particular gateway network gateway.
	GetGateway(ctx context.Context, in *GetGatewayNetworkGatewayRequest, opts ...grpc.CallOption) (*GetGatewayNetworkGatewayResponse, error)
	// Add a new gateway to a gateway network
	AddGateway(ctx context.Context, in *GatewayNetworkGatewayRequest, opts ...grpc.CallOption) (*GatewayNetworkEmptyResponse, error)
	// Delete a gateway from a gateway network.
	DeleteGateway(ctx context.Context, in *DeleteGatewayNetworkGatewayRequest, opts ...grpc.CallOption) (*GatewayNetworkEmptyResponse, error)
	// Get organization's list of gateway networks.
	ListOrganizationGatewayNetworks(ctx context.Context, in *ListGatewayNetworkOrganizationGatewayNetworksRequest, opts ...grpc.CallOption) (*ListGatewayNetworkOrganizationGatewayNetworksResponse, error)
	// Get gateway networks's organization list.
	ListOrganization(ctx context.Context, in *ListGatewayNetworkOrganizationsRequest, opts ...grpc.CallOption) (*ListGatewayNetworkOrganizationsResponse, error)
	// Get data for a particular gateway network organization.
	GetOrganization(ctx context.Context, in *GetGatewayNetworkOrganizationRequest, opts ...grpc.CallOption) (*GetGatewayNetworkOrganizationResponse, error)
	// Add a new organization to a gateway network
	AddOrganization(ctx context.Context, in *GatewayNetworkOrganizationRequest, opts ...grpc.CallOption) (*GatewayNetworkEmptyResponse, error)
	// Delete an organization from a gateway network.
	DeleteOrganization(ctx context.Context, in *DeleteGatewayNetworkOrganizationRequest, opts ...grpc.CallOption) (*GatewayNetworkEmptyResponse, error)
}

type gatewayNetworkClient struct {
	cc *grpc.ClientConn
}

func NewGatewayNetworkClient(cc *grpc.ClientConn) GatewayNetworkClient {
	return &gatewayNetworkClient{cc}
}

func (c *gatewayNetworkClient) List(ctx context.Context, in *ListGatewayNetworksRequest, opts ...grpc.CallOption) (*ListGatewayNetworksResponse, error) {
	out := new(ListGatewayNetworksResponse)
	err := grpc.Invoke(ctx, "/api.GatewayNetwork/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayNetworkClient) Get(ctx context.Context, in *GatewayNetworkRequest, opts ...grpc.CallOption) (*GetGatewayNetworkResponse, error) {
	out := new(GetGatewayNetworkResponse)
	err := grpc.Invoke(ctx, "/api.GatewayNetwork/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayNetworkClient) Create(ctx context.Context, in *CreateGatewayNetworkRequest, opts ...grpc.CallOption) (*CreateGatewayNetworkResponse, error) {
	out := new(CreateGatewayNetworkResponse)
	err := grpc.Invoke(ctx, "/api.GatewayNetwork/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayNetworkClient) Update(ctx context.Context, in *UpdateGatewayNetworkRequest, opts ...grpc.CallOption) (*GatewayNetworkEmptyResponse, error) {
	out := new(GatewayNetworkEmptyResponse)
	err := grpc.Invoke(ctx, "/api.GatewayNetwork/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayNetworkClient) Delete(ctx context.Context, in *GatewayNetworkRequest, opts ...grpc.CallOption) (*GatewayNetworkEmptyResponse, error) {
	out := new(GatewayNetworkEmptyResponse)
	err := grpc.Invoke(ctx, "/api.GatewayNetwork/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayNetworkClient) ListGateways(ctx context.Context, in *ListGatewayNetworkGatewaysRequest, opts ...grpc.CallOption) (*ListGatewayNetworkGatewaysResponse, error) {
	out := new(ListGatewayNetworkGatewaysResponse)
	err := grpc.Invoke(ctx, "/api.GatewayNetwork/ListGateways", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayNetworkClient) GetGateway(ctx context.Context, in *GetGatewayNetworkGatewayRequest, opts ...grpc.CallOption) (*GetGatewayNetworkGatewayResponse, error) {
	out := new(GetGatewayNetworkGatewayResponse)
	err := grpc.Invoke(ctx, "/api.GatewayNetwork/GetGateway", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayNetworkClient) AddGateway(ctx context.Context, in *GatewayNetworkGatewayRequest, opts ...grpc.CallOption) (*GatewayNetworkEmptyResponse, error) {
	out := new(GatewayNetworkEmptyResponse)
	err := grpc.Invoke(ctx, "/api.GatewayNetwork/AddGateway", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayNetworkClient) DeleteGateway(ctx context.Context, in *DeleteGatewayNetworkGatewayRequest, opts ...grpc.CallOption) (*GatewayNetworkEmptyResponse, error) {
	out := new(GatewayNetworkEmptyResponse)
	err := grpc.Invoke(ctx, "/api.GatewayNetwork/DeleteGateway", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayNetworkClient) ListOrganizationGatewayNetworks(ctx context.Context, in *ListGatewayNetworkOrganizationGatewayNetworksRequest, opts ...grpc.CallOption) (*ListGatewayNetworkOrganizationGatewayNetworksResponse, error) {
	out := new(ListGatewayNetworkOrganizationGatewayNetworksResponse)
	err := grpc.Invoke(ctx, "/api.GatewayNetwork/ListOrganizationGatewayNetworks", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayNetworkClient) ListOrganization(ctx context.Context, in *ListGatewayNetworkOrganizationsRequest, opts ...grpc.CallOption) (*ListGatewayNetworkOrganizationsResponse, error) {
	out := new(ListGatewayNetworkOrganizationsResponse)
	err := grpc.Invoke(ctx, "/api.GatewayNetwork/ListOrganization", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayNetworkClient) GetOrganization(ctx context.Context, in *GetGatewayNetworkOrganizationRequest, opts ...grpc.CallOption) (*GetGatewayNetworkOrganizationResponse, error) {
	out := new(GetGatewayNetworkOrganizationResponse)
	err := grpc.Invoke(ctx, "/api.GatewayNetwork/GetOrganization", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayNetworkClient) AddOrganization(ctx context.Context, in *GatewayNetworkOrganizationRequest, opts ...grpc.CallOption) (*GatewayNetworkEmptyResponse, error) {
	out := new(GatewayNetworkEmptyResponse)
	err := grpc.Invoke(ctx, "/api.GatewayNetwork/AddOrganization", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayNetworkClient) DeleteOrganization(ctx context.Context, in *DeleteGatewayNetworkOrganizationRequest, opts ...grpc.CallOption) (*GatewayNetworkEmptyResponse, error) {
	out := new(GatewayNetworkEmptyResponse)
	err := grpc.Invoke(ctx, "/api.GatewayNetwork/DeleteOrganization", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GatewayNetwork service

type GatewayNetworkServer interface {
	// Get gateway network list.
	List(context.Context, *ListGatewayNetworksRequest) (*ListGatewayNetworksResponse, error)
	// Get data for a particular gateway network.
	Get(context.Context, *GatewayNetworkRequest) (*GetGatewayNetworkResponse, error)
	// Create a new gateway network.
	Create(context.Context, *CreateGatewayNetworkRequest) (*CreateGatewayNetworkResponse, error)
	// Update an existing gateway network.
	Update(context.Context, *UpdateGatewayNetworkRequest) (*GatewayNetworkEmptyResponse, error)
	// Delete a gateway network.
	Delete(context.Context, *GatewayNetworkRequest) (*GatewayNetworkEmptyResponse, error)
	// Get gateway networks's gateway list.
	ListGateways(context.Context, *ListGatewayNetworkGatewaysRequest) (*ListGatewayNetworkGatewaysResponse, error)
	// Get data for a particular gateway network gateway.
	GetGateway(context.Context, *GetGatewayNetworkGatewayRequest) (*GetGatewayNetworkGatewayResponse, error)
	// Add a new gateway to a gateway network
	AddGateway(context.Context, *GatewayNetworkGatewayRequest) (*GatewayNetworkEmptyResponse, error)
	// Delete a gateway from a gateway network.
	DeleteGateway(context.Context, *DeleteGatewayNetworkGatewayRequest) (*GatewayNetworkEmptyResponse, error)
	// Get organization's list of gateway networks.
	ListOrganizationGatewayNetworks(context.Context, *ListGatewayNetworkOrganizationGatewayNetworksRequest) (*ListGatewayNetworkOrganizationGatewayNetworksResponse, error)
	// Get gateway networks's organization list.
	ListOrganization(context.Context, *ListGatewayNetworkOrganizationsRequest) (*ListGatewayNetworkOrganizationsResponse, error)
	// Get data for a particular gateway network organization.
	GetOrganization(context.Context, *GetGatewayNetworkOrganizationRequest) (*GetGatewayNetworkOrganizationResponse, error)
	// Add a new organization to a gateway network
	AddOrganization(context.Context, *GatewayNetworkOrganizationRequest) (*GatewayNetworkEmptyResponse, error)
	// Delete an organization from a gateway network.
	DeleteOrganization(context.Context, *DeleteGatewayNetworkOrganizationRequest) (*GatewayNetworkEmptyResponse, error)
}

func RegisterGatewayNetworkServer(s *grpc.Server, srv GatewayNetworkServer) {
	s.RegisterService(&_GatewayNetwork_serviceDesc, srv)
}

func _GatewayNetwork_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGatewayNetworksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayNetworkServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GatewayNetwork/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayNetworkServer).List(ctx, req.(*ListGatewayNetworksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayNetwork_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewayNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayNetworkServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GatewayNetwork/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayNetworkServer).Get(ctx, req.(*GatewayNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayNetwork_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGatewayNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayNetworkServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GatewayNetwork/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayNetworkServer).Create(ctx, req.(*CreateGatewayNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayNetwork_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGatewayNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayNetworkServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GatewayNetwork/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayNetworkServer).Update(ctx, req.(*UpdateGatewayNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayNetwork_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewayNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayNetworkServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GatewayNetwork/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayNetworkServer).Delete(ctx, req.(*GatewayNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayNetwork_ListGateways_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGatewayNetworkGatewaysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayNetworkServer).ListGateways(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GatewayNetwork/ListGateways",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayNetworkServer).ListGateways(ctx, req.(*ListGatewayNetworkGatewaysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayNetwork_GetGateway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGatewayNetworkGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayNetworkServer).GetGateway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GatewayNetwork/GetGateway",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayNetworkServer).GetGateway(ctx, req.(*GetGatewayNetworkGatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayNetwork_AddGateway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewayNetworkGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayNetworkServer).AddGateway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GatewayNetwork/AddGateway",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayNetworkServer).AddGateway(ctx, req.(*GatewayNetworkGatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayNetwork_DeleteGateway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGatewayNetworkGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayNetworkServer).DeleteGateway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GatewayNetwork/DeleteGateway",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayNetworkServer).DeleteGateway(ctx, req.(*DeleteGatewayNetworkGatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayNetwork_ListOrganizationGatewayNetworks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGatewayNetworkOrganizationGatewayNetworksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayNetworkServer).ListOrganizationGatewayNetworks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GatewayNetwork/ListOrganizationGatewayNetworks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayNetworkServer).ListOrganizationGatewayNetworks(ctx, req.(*ListGatewayNetworkOrganizationGatewayNetworksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayNetwork_ListOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGatewayNetworkOrganizationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayNetworkServer).ListOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GatewayNetwork/ListOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayNetworkServer).ListOrganization(ctx, req.(*ListGatewayNetworkOrganizationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayNetwork_GetOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGatewayNetworkOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayNetworkServer).GetOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GatewayNetwork/GetOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayNetworkServer).GetOrganization(ctx, req.(*GetGatewayNetworkOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayNetwork_AddOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewayNetworkOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayNetworkServer).AddOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GatewayNetwork/AddOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayNetworkServer).AddOrganization(ctx, req.(*GatewayNetworkOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayNetwork_DeleteOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGatewayNetworkOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayNetworkServer).DeleteOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GatewayNetwork/DeleteOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayNetworkServer).DeleteOrganization(ctx, req.(*DeleteGatewayNetworkOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GatewayNetwork_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.GatewayNetwork",
	HandlerType: (*GatewayNetworkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _GatewayNetwork_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _GatewayNetwork_Get_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _GatewayNetwork_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _GatewayNetwork_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _GatewayNetwork_Delete_Handler,
		},
		{
			MethodName: "ListGateways",
			Handler:    _GatewayNetwork_ListGateways_Handler,
		},
		{
			MethodName: "GetGateway",
			Handler:    _GatewayNetwork_GetGateway_Handler,
		},
		{
			MethodName: "AddGateway",
			Handler:    _GatewayNetwork_AddGateway_Handler,
		},
		{
			MethodName: "DeleteGateway",
			Handler:    _GatewayNetwork_DeleteGateway_Handler,
		},
		{
			MethodName: "ListOrganizationGatewayNetworks",
			Handler:    _GatewayNetwork_ListOrganizationGatewayNetworks_Handler,
		},
		{
			MethodName: "ListOrganization",
			Handler:    _GatewayNetwork_ListOrganization_Handler,
		},
		{
			MethodName: "GetOrganization",
			Handler:    _GatewayNetwork_GetOrganization_Handler,
		},
		{
			MethodName: "AddOrganization",
			Handler:    _GatewayNetwork_AddOrganization_Handler,
		},
		{
			MethodName: "DeleteOrganization",
			Handler:    _GatewayNetwork_DeleteOrganization_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gatewayNetwork.proto",
}

func init() { proto.RegisterFile("gatewayNetwork.proto", fileDescriptor6) }

var fileDescriptor6 = []byte{
	// 1126 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x98, 0x5b, 0x6f, 0xe3, 0x44,
	0x14, 0xc7, 0x35, 0x76, 0x1a, 0x9a, 0xb3, 0xdd, 0x76, 0x19, 0x95, 0x55, 0x9a, 0x84, 0x34, 0x19,
	0x75, 0x9b, 0x34, 0x94, 0x46, 0xb4, 0x14, 0x96, 0x22, 0x24, 0x4a, 0x17, 0x55, 0x95, 0xa0, 0x14,
	0x0b, 0x9e, 0x90, 0x90, 0x86, 0x7a, 0x1a, 0x2c, 0x12, 0xdb, 0xc4, 0x0e, 0xab, 0x52, 0x55, 0x42,
	0x5c, 0x9e, 0x00, 0x21, 0xb1, 0xe2, 0x95, 0x47, 0x24, 0x90, 0x78, 0x81, 0x8f, 0xc1, 0x23, 0xe2,
	0x1b, 0xf0, 0xca, 0x77, 0x40, 0x1e, 0x4f, 0x1c, 0x5f, 0xc6, 0x97, 0x5e, 0xde, 0xe2, 0xf1, 0xf1,
	0xcc, 0xef, 0xfc, 0xcf, 0x39, 0x73, 0x4e, 0x0b, 0xcb, 0x03, 0xea, 0xb2, 0xc7, 0xf4, 0xfc, 0x98,
	0xb9, 0x8f, 0xad, 0xf1, 0x27, 0x5b, 0xf6, 0xd8, 0x72, 0x2d, 0xac, 0x52, 0xdb, 0xa8, 0x35, 0x06,
	0x96, 0x35, 0x18, 0xb2, 0x3e, 0xb5, 0x8d, 0x3e, 0x35, 0x4d, 0xcb, 0xa5, 0xae, 0x61, 0x99, 0x8e,
	0x6f, 0x42, 0xfe, 0x40, 0x50, 0x7b, 0xcb, 0x70, 0xdc, 0xc3, 0xc8, 0xf7, 0x8e, 0xc6, 0x3e, 0x9d,
	0x30, 0xc7, 0xc5, 0xcb, 0x30, 0x37, 0x34, 0x46, 0x86, 0x5b, 0x45, 0x2d, 0xd4, 0x9d, 0xd3, 0xfc,
	0x07, 0x7c, 0x1f, 0xca, 0xd6, 0xd9, 0x99, 0xc3, 0xdc, 0xaa, 0xc2, 0x97, 0xc5, 0x93, 0xb7, 0xee,
	0x30, 0x3a, 0x3e, 0xfd, 0xb8, 0xaa, 0xb6, 0x50, 0xb7, 0xa2, 0x89, 0x27, 0xbc, 0x0e, 0x8b, 0xf6,
	0xd8, 0xf8, 0x8c, 0xba, 0x4c, 0xec, 0x5f, 0x2d, 0xb5, 0x50, 0x57, 0xd5, 0x62, 0xab, 0x9e, 0x9d,
	0x35, 0x1e, 0x50, 0xd3, 0xf8, 0x9c, 0x33, 0x1e, 0x3d, 0xaa, 0xce, 0xf9, 0x76, 0xd1, 0x55, 0xd2,
	0x81, 0x67, 0xa2, 0xbc, 0x53, 0xdc, 0x45, 0x50, 0x0c, 0x9d, 0xb3, 0xaa, 0x9a, 0x62, 0xe8, 0xe4,
	0x3f, 0x04, 0x2b, 0x87, 0xcc, 0x8d, 0x1b, 0x3b, 0xb6, 0x65, 0x3a, 0x2c, 0x6e, 0x8d, 0x1b, 0x50,
	0x39, 0x1d, 0x33, 0xea, 0x32, 0x7d, 0xdf, 0xf7, 0xac, 0xa2, 0xcd, 0x16, 0xbc, 0xb7, 0x13, 0x5b,
	0x17, 0x6f, 0x7d, 0xff, 0x66, 0x0b, 0x18, 0x43, 0xc9, 0xa4, 0x23, 0xc6, 0x1d, 0xab, 0x68, 0xfc,
	0x37, 0x6e, 0xc1, 0x1d, 0x9d, 0x39, 0xa7, 0x63, 0xc3, 0xf6, 0xb8, 0xb9, 0x2f, 0x15, 0x2d, 0xbc,
	0x24, 0x11, 0xa6, 0xdc, 0x42, 0xdd, 0xf9, 0x02, 0xc2, 0x3c, 0x25, 0x15, 0xe6, 0x1b, 0x05, 0xea,
	0x07, 0x9c, 0x58, 0xae, 0xcf, 0x94, 0x12, 0xa5, 0x53, 0x2a, 0x45, 0x28, 0xd5, 0x82, 0x94, 0x25,
	0x19, 0x25, 0xde, 0x80, 0x79, 0x91, 0xae, 0x4e, 0x75, 0xae, 0xa5, 0x76, 0xef, 0x6c, 0xdf, 0xdd,
	0xa2, 0xb6, 0xb1, 0x25, 0x98, 0x1d, 0x2d, 0x78, 0x8d, 0x77, 0x61, 0xc1, 0xa6, 0xe7, 0x23, 0x66,
	0xba, 0x27, 0x43, 0x6a, 0x3a, 0xd5, 0x32, 0x37, 0x7f, 0x9a, 0x9b, 0x9f, 0x84, 0x5e, 0x68, 0x11,
	0x33, 0xd2, 0x83, 0xf9, 0xe9, 0x66, 0xb8, 0x09, 0x20, 0xb6, 0x7b, 0x7b, 0xff, 0x40, 0x78, 0x1e,
	0x5a, 0x21, 0x4d, 0x58, 0x08, 0xef, 0x94, 0xc8, 0xa1, 0x2d, 0x68, 0xc8, 0x25, 0x95, 0x67, 0x11,
	0xf9, 0x13, 0x41, 0xfd, 0x7d, 0x9e, 0x17, 0x85, 0x72, 0x34, 0x88, 0x89, 0x92, 0x1e, 0x13, 0xb5,
	0x48, 0x4c, 0x4a, 0x05, 0x63, 0x22, 0x2f, 0xa9, 0x09, 0xd4, 0xa5, 0xd7, 0x80, 0x70, 0xb2, 0x09,
	0xe0, 0x5a, 0x2e, 0x1d, 0x1e, 0x58, 0x13, 0x73, 0x7a, 0x19, 0x84, 0x56, 0xf0, 0x4b, 0x50, 0x1e,
	0x33, 0x67, 0x32, 0xf4, 0xea, 0xc6, 0x8b, 0x50, 0xd3, 0x0f, 0x68, 0x5a, 0xe9, 0x69, 0xc2, 0x9a,
	0x3c, 0x0b, 0xf5, 0xa8, 0xc5, 0x9b, 0x23, 0xdb, 0x3d, 0x9f, 0x9a, 0x91, 0x63, 0x68, 0x44, 0x5f,
	0x8b, 0xa7, 0x34, 0x2d, 0xa3, 0xb1, 0x56, 0x12, 0xb1, 0x7e, 0x0f, 0xc8, 0x23, 0x36, 0x64, 0xf1,
	0xd0, 0xdc, 0x70, 0x57, 0x0a, 0xed, 0xa4, 0x76, 0x41, 0x32, 0xa7, 0x6c, 0x1a, 0xdc, 0xac, 0x8a,
	0xfc, 0x66, 0x55, 0xc3, 0x37, 0x2b, 0x79, 0x17, 0x56, 0x13, 0x62, 0xde, 0x90, 0xfa, 0x6b, 0x04,
	0xad, 0xf4, 0x3d, 0x45, 0xdc, 0xef, 0x81, 0x3a, 0xa2, 0xa7, 0xa2, 0x6a, 0xbc, 0x9f, 0xd2, 0x74,
	0x8d, 0x5c, 0x9c, 0x6a, 0xe6, 0xc5, 0x59, 0x8a, 0x5d, 0x9c, 0xe4, 0x2b, 0x04, 0x24, 0x4b, 0xbd,
	0x82, 0x09, 0xf8, 0x5a, 0x2c, 0x01, 0x1f, 0xc8, 0x13, 0x30, 0xe6, 0x5f, 0x90, 0x87, 0x1f, 0x40,
	0x3b, 0x6a, 0xf8, 0x4e, 0xa8, 0x3c, 0xd2, 0x14, 0x4e, 0xd6, 0x96, 0x22, 0xad, 0x2d, 0x0a, 0x1d,
	0x59, 0xd6, 0xdd, 0xe6, 0x11, 0xdf, 0x21, 0x78, 0x31, 0xa9, 0x62, 0xf8, 0x84, 0x94, 0x06, 0x9f,
	0x3c, 0x00, 0x49, 0xef, 0xec, 0xab, 0xa5, 0xeb, 0x19, 0xac, 0x67, 0xd3, 0xdc, 0x52, 0x59, 0x7c,
	0x08, 0x6b, 0x89, 0x10, 0xdf, 0xa6, 0xac, 0x3f, 0x21, 0xd8, 0xc9, 0x3c, 0x20, 0xbd, 0x27, 0x1c,
	0x05, 0xe7, 0x1d, 0xe9, 0xb7, 0x5e, 0x34, 0xbf, 0x23, 0x78, 0x90, 0xe3, 0xb8, 0x20, 0x89, 0x7b,
	0xaa, 0x4b, 0xe3, 0xab, 0xf3, 0x8e, 0x63, 0x38, 0xf6, 0x90, 0x9e, 0x1f, 0xcf, 0x40, 0xc3, 0x4b,
	0x37, 0xe2, 0xfd, 0x15, 0xc1, 0xee, 0x15, 0xd3, 0xb3, 0x60, 0xdd, 0x9f, 0xc4, 0xea, 0xfe, 0xa1,
	0xbc, 0xee, 0xf3, 0x63, 0x16, 0x5c, 0x05, 0xdf, 0x23, 0xe8, 0xe4, 0x26, 0x6f, 0x41, 0xba, 0x37,
	0x62, 0x74, 0xbd, 0x7c, 0xba, 0x38, 0xcf, 0xf6, 0x5f, 0x4b, 0xb0, 0x18, 0x35, 0xc7, 0x03, 0x28,
	0x79, 0x84, 0x78, 0x95, 0x6f, 0x97, 0x3e, 0xbe, 0xd7, 0x5a, 0xe9, 0x06, 0xa2, 0xc3, 0x36, 0xbe,
	0xfc, 0xfb, 0xdf, 0x27, 0xca, 0x7d, 0xbc, 0xcc, 0xff, 0x3e, 0x10, 0xed, 0xc1, 0x14, 0x56, 0x58,
	0x07, 0xf5, 0x90, 0xb9, 0xb8, 0x16, 0x1e, 0xcf, 0xa2, 0xe3, 0x4c, 0x2d, 0xa7, 0xd3, 0x93, 0x36,
	0x3f, 0xa0, 0x8e, 0x57, 0x64, 0x07, 0xf4, 0x2f, 0x0c, 0xfd, 0x12, 0x9b, 0x50, 0xf6, 0x27, 0x2c,
	0xec, 0xf3, 0x66, 0x4c, 0xb0, 0xb5, 0x76, 0x86, 0x85, 0x38, 0x71, 0x95, 0x9f, 0xb8, 0x42, 0xa4,
	0x2e, 0xed, 0xa1, 0x1e, 0x1e, 0x43, 0xd9, 0x1f, 0xd0, 0xc4, 0x79, 0x19, 0xd3, 0x9a, 0x50, 0x30,
	0x6b, 0x46, 0x59, 0xe3, 0xc7, 0x35, 0x6b, 0xe9, 0x0e, 0x7a, 0x67, 0x1a, 0x50, 0xf6, 0x7b, 0x40,
	0xa6, 0x98, 0xf9, 0xa7, 0x09, 0x39, 0x7b, 0x19, 0x72, 0x7e, 0x8b, 0x60, 0x21, 0x14, 0x72, 0x07,
	0xaf, 0xa7, 0x64, 0x41, 0x6c, 0x44, 0xa9, 0x75, 0x72, 0xed, 0x04, 0x44, 0x8f, 0x43, 0xac, 0x61,
	0x92, 0x0a, 0xd1, 0x0f, 0x26, 0xf8, 0x1f, 0x11, 0xc0, 0x2c, 0x3b, 0xf0, 0x5a, 0x4e, 0x5f, 0xf6,
	0x49, 0x8a, 0x75, 0x6f, 0xf2, 0x32, 0xe7, 0x78, 0x01, 0xf7, 0xf3, 0x39, 0xfa, 0x17, 0xb3, 0xd1,
	0xe7, 0x12, 0x7f, 0x81, 0x00, 0xf6, 0x75, 0x7d, 0x0a, 0xd5, 0x96, 0xc8, 0x1e, 0x23, 0xca, 0x8f,
	0xcc, 0xf3, 0x1c, 0xa6, 0x43, 0x0a, 0x88, 0xe2, 0x25, 0xc4, 0x13, 0x04, 0x77, 0x23, 0x53, 0x01,
	0xf6, 0xe5, 0xcf, 0x9f, 0x4f, 0x0b, 0xb0, 0x08, 0x61, 0x7a, 0x57, 0x16, 0xe6, 0x1f, 0x04, 0xab,
	0x5e, 0x02, 0x64, 0x5c, 0xcd, 0xf8, 0x95, 0x94, 0x34, 0xc9, 0x9f, 0x36, 0x6a, 0x7b, 0xd7, 0xf9,
	0x54, 0xf8, 0xf4, 0x2a, 0xf7, 0x69, 0x17, 0xef, 0x48, 0x7d, 0x0a, 0xb7, 0x33, 0xa7, 0x7f, 0x11,
	0xed, 0xe3, 0x97, 0xf8, 0x67, 0x04, 0xf7, 0xe2, 0x7e, 0xe1, 0xe7, 0x0a, 0xd0, 0x04, 0xe8, 0x9b,
	0xc5, 0x8c, 0x05, 0x6c, 0x9f, 0xc3, 0x6e, 0xe0, 0x4e, 0x7a, 0x00, 0x22, 0xc4, 0xf8, 0x37, 0x04,
	0x4b, 0x87, 0x2c, 0xca, 0xb7, 0x51, 0xa4, 0x5b, 0xf8, 0x74, 0x57, 0x68, 0x2c, 0xe4, 0x75, 0xce,
	0xb6, 0x87, 0x1f, 0x16, 0x64, 0x4b, 0xaa, 0xf9, 0x03, 0x82, 0xa5, 0x7d, 0x5d, 0x8f, 0xc0, 0xae,
	0x4b, 0x92, 0x52, 0x46, 0x9a, 0x9f, 0xbc, 0xdb, 0x9c, 0x6f, 0x93, 0x14, 0xd5, 0xce, 0xab, 0xa6,
	0x5f, 0x10, 0x60, 0xbf, 0x72, 0x22, 0x50, 0x9b, 0xa9, 0x25, 0x75, 0x3d, 0x34, 0x21, 0x5d, 0xef,
	0xda, 0xd2, 0x7d, 0x54, 0xe6, 0xff, 0x76, 0xdb, 0xf9, 0x3f, 0x00, 0x00, 0xff, 0xff, 0x7e, 0xab,
	0x4e, 0x8b, 0xb1, 0x13, 0x00, 0x00,
}
